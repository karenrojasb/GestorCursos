import { useState } from "react";
import { motion } from "framer-motion";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  onClose: () => void;
  onSave: (data: any) => void;
}

export default function CursoModal({ onClose, onSave }: CursoModalProps) {
  const [formData, setFormData] = useState({
    id: 0,
    NombreCurso: "",
    Valor: "",
    Publico: "",
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: "",
    CupoMax: "",
    Lugar: "",
    LunesIni: "",
    LunesFin: "",
    MartesIni: "",
    MartesFin: "",
    MiercolesIni: "",
    MiercolesFin: "",
    JuevesIni: "",
    JuevesFin: "",
    ViernesIni: "",
    ViernesFin: "",
    SabadoIni: "",
    SabadoFin: "",
    DomingoIni: "",
    DomingoFin: "",
    Linea: "",
    Estado: "",
    Modalidad: "",
    Unidad: "",
    Profesor: "",
    SegundoPro: "",
    Proexterno: "",
    Descripcion: "",
    IdTipoCurso: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validar campos obligatorios
    if (!formData.NombreCurso || !formData.Valor || !formData.Periodo || !formData.Inicio || !formData.Fin) {
      alert("Por favor completa todos los campos obligatorios.");
      return;
    }

    try {
      console.log("Datos enviados al backend:", formData);

      const response = await fetch("http://localhost:8090/api/cursos", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          Valor: Number(formData.Valor),
          Publico: Number(formData.Publico),
          Horas: Number(formData.Horas),
          CupoMax: Number(formData.CupoMax),
          Linea: Number(formData.Linea),
          Estado: Number(formData.Estado),
          Modalidad: Number(formData.Modalidad),
          Unidad: Number(formData.Unidad),
          Profesor: Number(formData.Profesor),
          SegundoPro: formData.SegundoPro ? Number(formData.SegundoPro) : null, // ✅ Convertir a número o null
          Proexterno: formData.Proexterno.toString(), // ✅ Convertir a string
          IdTipoCurso: Number(formData.IdTipoCurso),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Error al guardar:", errorData);
        alert(`Error al guardar: ${errorData.message || "Ocurrió un problema"}`);
        return;
      }

      const result = await response.json();
      alert("Curso guardado correctamente");
      onSave(result);
    } catch (error) {
      console.error("Error de red o servidor:", error);
      alert("No se pudo conectar con el servidor");
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.8 }}
        className="bg-white p-6 rounded-lg shadow-lg w-11/12 max-w-4xl relative"
      >
        {/* BOTÓN CERRAR */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-red-600 transition-transform duration-300 transform hover:rotate-90"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        {/* TÍTULO */}
        <h2 className="text-2xl font-bold text-[#990000] mb-4 text-center">
          Crear Curso
        </h2>

        {/* CONTENEDOR SCROLLABLE */}
        <div className="max-h-[70vh] overflow-y-auto pr-4">
          <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-4">
            <input name="NombreCurso" placeholder="Nombre del Curso" onChange={handleChange} className="border p-2 rounded" />
            <input name="Valor" type="number" placeholder="Valor" onChange={handleChange} className="border p-2 rounded" />
            <input name="Publico" type="number" placeholder="Público" onChange={handleChange} className="border p-2 rounded" />
            <input name="Periodo" placeholder="Periodo" onChange={handleChange} className="border p-2 rounded" />
            <input name="Inicio" type="date" onChange={handleChange} className="border p-2 rounded" />
            <input name="Fin" type="date" onChange={handleChange} className="border p-2 rounded" />
            <input name="Horas" type="number" placeholder="Horas" onChange={handleChange} className="border p-2 rounded" />
            <input name="CupoMax" type="number" placeholder="Cupo Máximo" onChange={handleChange} className="border p-2 rounded" />
            <input name="Lugar" placeholder="Lugar" onChange={handleChange} className="border p-2 rounded" />

            {/* HORARIOS POR DÍA */}
            <div className="col-span-2 grid grid-cols-3 gap-4">
              {["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"].map((dia) => (
                <>
                  <input name={`${dia}Ini`} type="time" placeholder={`${dia} Inicio`} onChange={handleChange} className="border p-2 rounded" />
                  <input name={`${dia}Fin`} type="time" placeholder={`${dia} Fin`} onChange={handleChange} className="border p-2 rounded" />
                </>
              ))}
            </div>

            {/* DATOS ADICIONALES */}
            <input name="Profesor" type="number" placeholder="Profesor" onChange={handleChange} className="border p-2 rounded" />
            <input name="SegundoPro" type="number" placeholder="Segundo Profesor" onChange={handleChange} className="border p-2 rounded" />
            <input name="Proexterno" placeholder="Profesor Externo" onChange={handleChange} className="border p-2 rounded" />
            <input name="IdTipoCurso" type="number" placeholder="ID Tipo Curso" onChange={handleChange} className="border p-2 rounded" />
            <textarea name="Descripcion" placeholder="Descripción" onChange={handleChange} className="border p-2 rounded col-span-2 h-20"></textarea>

            {/* BOTÓN GUARDAR */}
            <button type="submit" className="col-span-2 bg-[#990000] text-white py-2 rounded-lg shadow-md transition-all hover:shadow-lg">
              Guardar Curso
            </button>
          </form>
        </div>
      </motion.div>
    </div>
  );
}