async obtenerCursosParaUsuario(id_emp: string) {
  try {
      // OBTENER EL VALOR DE "PÚBLICO" DEL USUARIO
      const usuario = await this.prisma.$queryRaw<{ publico: number }[]>`
          SELECT publico FROM gescur.emp_nomina WHERE id_emp = ${id_emp}
      `;

      if (!usuario || usuario.length === 0) {
          throw new Error('Usuario no encontrado en gescur.emp_nomina');
      }

      const publico = usuario[0].publico;

      console.log(`Usuario ${id_emp} tiene publico: ${publico}`);

      // OBTENER CURSOS SEGÚN EL PÚBLICO
      let cursos;
      if (publico === 3) {
          
          cursos = await this.prisma.$queryRaw`
              SELECT * FROM gescur.Cursos 
              ORDER BY id
          `;
      } else {
      
          cursos = await this.prisma.$queryRaw`
              SELECT * FROM gescur.Cursos 
              WHERE publico = ${publico} OR publico = 3
              ORDER BY id
          `;
      }

      console.log(`Cursos obtenidos para usuario ${id_emp}:`, cursos);

      return cursos;
  } catch (error) {
      console.error('Error al obtener cursos:', error.message);
      throw new Error('No se pudieron obtener los cursos.');
  }
}
