import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones.dto';

@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  async crearInscripcion(data: CreateInscripcionDto) {
    return this.prisma.inscripciones.create({
      data: {
        idCur: data.idCur,
        docInscr: data.docInscr,
        est: data.est, 
        fecreg: new Date(), 
      },
    });
  }

  async getInscripciones() {
    return this.prisma.inscripciones.findMany({
      include: {
        Cursos: { select: { id: true, NombreCurso: true } }, // Asegura que el nombre de la relación sea correcto
      },
    });
  }

  async obtenerPorId(id: number) {
    const inscripcion = await this.prisma.inscripciones.findUnique({ where: { id } });
    if (!inscripcion) throw new NotFoundException('Inscripción no encontrada');
    return inscripcion;
  }

  async actualizarEstado(id: number, dto: UpdateInscripcionDto) {
    return this.prisma.inscripciones.update({
      where: { id },
      data: { est: Boolean(dto.est) }, // Aseguramos que est sea booleano
    });
  }

  async eliminarInscripcion(id: number) {
    return this.prisma.inscripciones.delete({ where: { id } });
  }
}




import { Controller, Get, Post, Body, Param, Patch, Delete } from '@nestjs/common';
import { InscripcionesService } from './inscripciones.service';
import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones.dto';

@Controller('inscripciones')
export class InscripcionesController {
  constructor(private readonly inscripcionesService: InscripcionesService) {}

  @Post()
  crear(@Body() dto: CreateInscripcionDto) {
    return this.inscripcionesService.crearInscripcion(dto);
  }

  @Get()
  obtenerTodas() {
    return this.inscripcionesService.getInscripciones();
  }

  @Get(':id')
  obtenerPorId(@Param('id') id: string) {
    return this.inscripcionesService.obtenerPorId(Number(id));
  }

  @Patch(':id')
  actualizarEstado(@Param('id') id: string, @Body() dto: UpdateInscripcionDto) {
    return this.inscripcionesService.actualizarEstado(Number(id), dto);
  }

  @Delete(':id')
  eliminar(@Param('id') id: string) {
    return this.inscripcionesService.eliminarInscripcion(Number(id));
  }
}

