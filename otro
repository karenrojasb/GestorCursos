import React, { useState, useEffect } from "react";
import {
  XMarkIcon,
  MagnifyingGlassIcon,
  ArrowDownTrayIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@heroicons/react/24/solid";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

interface Inscripcion {
  NombreCurso: string;
  id: number;
  idCur?: number;
  docInscr: string;
  nombre: string;
  Est: string;
  fecreg: string;
  Nota: number;
  Especificacion: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  Lugar: string;
  Linea: string;
  Valor: number;
  Modalidad: string;
  NombreProfesor: string;
  SegundoProfe: string;
  Proexterno: string;
  IdTipoCurso: string;
  Descripcion: string;
  Unidad: string;
  Publico: string;
  Periodo: string;
  CupoMax: number;
  idRegistro: number;
  FechaRegistro: number;
  LunesIni: string;
  LunesFin: string;
  MartesIni: string;                       
  MartesFin: string;                       
  MiercolesIni: string;
  MiercolesFin: string;              
  JuevesIni: string;                       
  JuevesFin: string;                  
  ViernesIni: string;                 
  ViernesFin: string;                     
  SabadoIni: string;                      
  SabadoFin: string;                       
  DomingoIni: string;                     
  DomingoFin: string;
}


interface ReportesModalProps {
  onClose: () => void;
}

const ReportesModal: React.FC<ReportesModalProps> = ({ onClose }) => {
  const [inscripciones, setInscripciones] = useState<Inscripcion[]>([]);
  const [inscripcionesFiltradas, setInscripcionesFiltradas] = useState<Inscripcion[]>([]);
  const [busqueda, setBusqueda] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [expandedCursos, setExpandedCursos] = useState<{ [key: number]: boolean }>({});
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [modalCalificarAbierto, setModalCalificarAbierto] = useState(false);
  const [inscritoSeleccionado, setInscritoSeleccionado] = useState<{nombre: string, doc:string} | null>(null);

  useEffect(() => {
    const fetchInscripciones = async () => {
      try {
        const idProfesor = localStorage.getItem("id_emp");
        if (!idProfesor) return;
  
        const response = await fetch(`http://localhost:8090/api/inscripciones/cursos/${idProfesor}`);
        let data: Inscripcion[] = await response.json();
  
        // Eliminar duplicados usando combinación de docInscr + idCur como clave única
        const seen = new Set<string>();
        const dataSinDuplicados = data.filter((item) => {
          const key = `${item.docInscr}-${item.idCur}`;
          if (seen.has(key)) return false;
          seen.add(key);
          return true;
        });
  
        setInscripciones(dataSinDuplicados);
        setInscripcionesFiltradas(dataSinDuplicados);
        setIsLoading(false);
      } catch (error) {
        console.error("Error al obtener inscripciones:", error);
        setIsLoading(false);
      }
    };
  
    fetchInscripciones();
  }, []);

  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);

    const filtrados = inscripciones.filter((inscripcion) => {
      const cursoNombre = inscripcion.NombreCurso || "";
      const fechaRegistro = new Date(inscripcion.fecreg).toLocaleDateString();
      const idCurso = String(inscripcion.idCur || "");
      const nombreInscrito = inscripcion.nombre.toLowerCase();
      const docInscrito = inscripcion.docInscr;

      return (
        idCurso.includes(texto) ||
        cursoNombre.toLowerCase().includes(texto) ||
        fechaRegistro.includes(texto) ||
        nombreInscrito.includes(texto) ||
        docInscrito.includes(texto)
      );
    });

    setInscripcionesFiltradas(filtrados);
  };

  const groupedInscripciones = inscripcionesFiltradas.reduce((acc, inscripcion) => {
    const cursoId = inscripcion.idCur || 0;
    if (!acc[cursoId]) acc[cursoId] = [];
    acc[cursoId].push(inscripcion);
    return acc;
  }, {} as { [key: number]: Inscripcion[] });

  const toggleCurso = (cursoId: number) => {
    setExpandedCursos((prev) => ({
      ...prev,
      [cursoId]: !prev[cursoId],
    }));
  };

  const handleDownloadExcelByCurso = (cursoId: number) => {
    const datosCurso = inscripcionesFiltradas.filter(
      (inscripcion) => inscripcion.idCur === cursoId
    );

    const data = datosCurso.map((inscripcion) => ({
      "ID Curso": inscripcion.idCur,
      "Nombre del Curso": inscripcion.NombreCurso || "Desconocido",
      Documento: inscripcion.docInscr,
      Nombre: inscripcion.nombre,
      Estado: inscripcion.Est ? "Inscrito" : "Cancelado",
      "Fecha Registro": new Date(inscripcion.fecreg).toLocaleDateString(),
    }));

    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.json_to_sheet(data);
    XLSX.utils.book_append_sheet(workbook, worksheet, "Inscripciones");

    const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
    const blob = new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, `Inscripciones_Curso_${cursoId}.xlsx`);
  };

  const handleMouseEnter = () => {
    setIsSearchActive(true);
  };

  const handleMouseLeave = () => {
    if (busqueda === "") {
      setIsSearchActive(true);
    }
  };

  const abrirModalCalificar = async (nombre: string, doc: string) => {
    setInscritoSeleccionado({ nombre, doc });
    setModalCalificarAbierto(true);
  
    try {
      const response = await fetch(`http://localhost:8090/api/Notas/${doc}`);
      if (!response.ok) throw new Error("Error al obtener notas");
  
      // Fusiona las nuevas notas con las anteriores, reemplazando las del mismo idInscrito
     
    } catch (error) {
      console.error("Error al obtener notas del inscrito:", error);
    }
  };
  
  const guardarNota = async (notaTexto: string) => {
    if (!inscritoSeleccionado) return;
  
    const cursoId = Object.keys(groupedInscripciones).find(cursoId =>
      groupedInscripciones[Number(cursoId)].some(ins =>
        ins.docInscr === inscritoSeleccionado.doc
      )
    );
  
    const idCurso = Number(cursoId);
    const idInscrito = Number(inscritoSeleccionado.doc); 
    const Nota = Number(notaTexto); 
    const idRegistro = 1; 
  
    try {
      const response = await fetch("http://localhost:8090/api/Notas", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          idCurso,
          idInscrito,
          Nota,
          idRegistro,
        }),
      });
  
      if (!response.ok) throw new Error("Error al guardar la nota");
  
      console.log("Nota guardada exitosamente");
    } catch (error) {
      console.error("Error al guardar nota:", error);
    }
  };

  const formatearHorario = (Inscripcion: Inscripcion) => {
    const dias = [
      { dia: "Lunes", ini: Inscripcion.LunesIni, fin: Inscripcion.LunesFin },
      { dia: "Martes", ini: Inscripcion.MartesIni, fin: Inscripcion.MartesFin },
      { dia: "Miércoles", ini: Inscripcion.MiercolesIni, fin: Inscripcion.MiercolesFin },
      { dia: "Jueves", ini: Inscripcion.JuevesIni, fin: Inscripcion.JuevesFin },
      { dia: "Viernes", ini: Inscripcion.ViernesIni, fin: Inscripcion.ViernesFin },
      { dia: "Sábado", ini: Inscripcion.SabadoIni, fin: Inscripcion.SabadoFin },
      { dia: "Domingo", ini: Inscripcion.DomingoIni, fin: Inscripcion.DomingoFin },
    ];
  
    return dias
      .filter(d => d.ini && d.fin)
     ; 
  };
  

  return (
    <div className="p-6 rounded-lg shadow-black fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative flex flex-col gap-4 w-full max-w-5xl bg-white py-8 px-10 rounded-lg shadow-md max-h-[98vh] overflow-y-auto">
        {/* BOTÓN CERRAR */}
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-[#990000] transition-transform duration-300 transform hover:rotate-90 hover:scale-110"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        <h2 className="text-3xl font-bold text-[#990000] text-center seleccion-personalizada">Lista de Inscritos</h2>

        {/* BUSCADOR */}
        {/* BARRA DE BÚSQUEDA ANIMADA */}
               <div className="relative flex items-center"
                  onMouseEnter={handleMouseEnter}
                  onMouseLeave={handleMouseLeave}>
                   <button onClick={() => setIsSearchActive(!isSearchActive)} className="p-2 rounded-full bg-gray-200">
                     <MagnifyingGlassIcon className="h-6 w-6 text-[#990000]" />
                   </button>
                   <input
                     type="text"
                     placeholder="Buscar por ID, Nombre o Fecha"
                     value={busqueda}
                     onChange={handleBuscar}
                     className={`px-4 py-2 border rounded-full transition-all duration-500 ease-in-out 
                       ${isSearchActive ? "w-96 opacity-100 bg-white shadow-md" : "w-0 opacity-0"} focus:outline-none`}
                   /> 
                   </div>

        {/* LISTADO DE CURSOS */}
        {isLoading ? (
          <div className="flex justify-center my-4">
            <div className="w-8 h-8 border-4 border-gray-300 border-t-[#990000] rounded-full animate-spin"></div>
          </div>
        ) : (
          <div className="space-y-4">
           
{Object.entries(groupedInscripciones).map(([cursoId, inscripciones]) => {
  const cursoAbierto = expandedCursos[Number(cursoId)] || false;
  const cursoNombre = inscripciones[0]?.NombreCurso || `Curso ${cursoId}`;
  const fechaInicio = inscripciones[0]?.Inicio
    ? new Date(inscripciones[0].Inicio).toLocaleDateString()
    : "Sin fecha";
  const fechaFin = inscripciones[0]?.Fin
    ? new Date(inscripciones[0].Fin).toLocaleDateString()
    : "Sin fecha";

  return (
    


 <div key={cursoId} className="border border-gray-300 rounded shadow-md  transition-all duration-300 hover:shadow-xl transform hover:scale-x-105">
      <div className="flex justify-between items-center bg-gray-100 px-4 py-3">
        <div>
          <h3 className="text-lg font-bold text-[#990000] seleccion-personalizada">{cursoNombre}</h3>
          <p className="text-sm text-gray-600">
            <span className="font-medium">Inicio:</span> {fechaInicio} &nbsp; | &nbsp;
            <span className="font-medium">Fin:</span> {fechaFin}
          </p>
        </div>
        <div className="flex gap-3">
          <button
            onClick={() => handleDownloadExcelByCurso(Number(cursoId))}
            className="flex items-center bg-green-600 text-white px-3 py-1.5 rounded-md hover:bg-green-700 transition"
          >
            <ArrowDownTrayIcon className="h-5 w-5 mr-1" />
            Descargar
          </button>
          <button
            onClick={() => toggleCurso(Number(cursoId))}
            className="flex items-center bg-[#990000] text-white px-3 py-1.5 rounded-md hover:bg-[#7a0000] transition"
          >
            {cursoAbierto ? (
              <>
                <ChevronUpIcon className="h-5 w-5 mr-1" />
                Ver menos
              </>
            ) : (
              <>
                <ChevronDownIcon className="h-5 w-5 mr-1" />
                Ver más
              </>
            )}
          </button>
        </div>
      </div>


      
</div>



              );
            })}
          </div>
        )}
      </div>

      
    </div>
  );
};

export default ReportesModal;
