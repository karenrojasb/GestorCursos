async obtenerCursosParaUsuario(id_emp: string) {
    try {
        // Obtener el valor de 'publico' del usuario
        const usuario = await this.prisma.$queryRaw<{ publico: number }[]>`
            SELECT publico FROM gescur.emp_nomina WHERE id_emp = ${id_emp}
        `;

        if (!usuario || usuario.length === 0) {
            throw new Error('Usuario no encontrado en gescur.emp_nomina');
        }

        const publico = usuario[0].publico;

        console.log(`Usuario ${id_emp} tiene publico: ${publico}`);

        // Obtener cursos según el público
        let cursos;
        if (publico === 3) {
            // Si es '3', debe ver todos los cursos (incluyendo público 1 y 2)
            cursos = await this.prisma.$queryRaw`
                SELECT * FROM gescur.Cursos 
                ORDER BY id
            `;
        } else {
            // Si es '1' o '2', debe ver los cursos de su público y los de público 3 (abiertos para todos)
            cursos = await this.prisma.$queryRaw`
                SELECT * FROM gescur.Cursos 
                WHERE publico = ${publico} OR publico = 3
                ORDER BY id
            `;
        }

        console.log(`Cursos obtenidos para usuario ${id_emp}:`, cursos);

        return cursos;
    } catch (error) {
        console.error('Error al obtener cursos:', error.message);
        throw new Error('No se pudieron obtener los cursos.');
    }
}