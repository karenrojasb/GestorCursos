import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones.dto';

@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  async crearInscripcion(data: CreateInscripcionDto) {
    // Verificar si ya existe una inscripción con el mismo curso y documento
    const inscripcionExistente = await this.prisma.inscripciones.findFirst({
      where: {
        idCur: data.idCur,
        docInscr: data.docInscr,
      },
    });

    if (inscripcionExistente) {
      // Si la inscripción ya existe, actualizamos el estado a activo (1)
      return this.prisma.inscripciones.update({
        where: { id: inscripcionExistente.id },
        data: {
          est: 1, // Reactivar la inscripción
          fecreg: new Date(), // Actualizar la fecha de inscripción
        },
      });
    }

    // Si no existe, se crea una nueva inscripción
    return this.prisma.inscripciones.create({
      data: {
        idCur: data.idCur,
        docInscr: data.docInscr,
        est: 1, // Siempre inicia como activa
        fecreg: new Date(),
      },
    });
  }

  async getInscripciones() {
    return this.prisma.$queryRawUnsafe<
      Array<{
        id: number;
        idCur: number;
        NombreCurso: string;
        docInscr: string;
        nombre: string | null; // Puede ser null si el empleado no existe
        est: number;
        fecreg: Date;
      }>
    >(
      `SELECT 
        i.id, 
        i.idCur, 
        c.NombreCurso, 
        i.docInscr, 
        e.nombre, 
        i.est, 
        i.fecreg
      FROM gescur.Inscripciones i
      LEFT JOIN gescur.Cursos c ON i.idCur = c.id
      LEFT JOIN gescur.emp_nomina e ON i.docInscr = e.id_emp`
    );
  }

  async obtenerPorId(id: number) {
    const inscripcion = await this.prisma.inscripciones.findUnique({ where: { id } });
    if (!inscripcion) throw new NotFoundException('Inscripción no encontrada');
    return inscripcion;
  }

  async actualizarEstado(id: number, dto: UpdateInscripcionDto) {
    return this.prisma.inscripciones.update({
      where: { id },
      data: { est: dto.est ? 1 : 0 }, // Convertimos booleano a número
    });
  }

  async eliminarInscripcion(id: number) {
    return this.prisma.inscripciones.delete({ where: { id } });
  }
}







import { Controller, Get, Post, Body, Param, Patch, Delete } from '@nestjs/common';
import { InscripcionesService } from './inscripciones.service';
import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones.dto';

@Controller('inscripciones')
export class InscripcionesController {
  constructor(private readonly inscripcionesService: InscripcionesService) {}

  @Post()
  crear(@Body() dto: CreateInscripcionDto) {
    return this.inscripcionesService.crearInscripcion(dto);
  }

  @Get()
  obtenerTodas() {
    return this.inscripcionesService.getInscripciones();
  }

  @Get(':id')
  obtenerPorId(@Param('id') id: string) {
    return this.inscripcionesService.obtenerPorId(Number(id));
  }

  @Patch(':id')
  actualizarEstado(@Param('id') id: string, @Body() dto: UpdateInscripcionDto) {
    return this.inscripcionesService.actualizarEstado(Number(id), dto);
  }

  @Delete(':id')
  eliminar(@Param('id') id: string) {
    return this.inscripcionesService.eliminarInscripcion(Number(id));
  }
}
