<select
  name="Publico"
  value={formData.Publico ?? ""}
  className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
  onChange={(e) =>
    setFormData((prev) => ({
      ...prev,
      Publico: Number(e.target.value), 
    }))
  }
  required
>
  <option value="">Seleccione una opción</option>
  {opcionesPublico.map((opcion) => (
    <option key={opcion.id} value={opcion.id}>
      {opcion.Especificacion}
    </option>
  ))}
</select>




useEffect(() => {
  if (!courseId || !isOpen) return;

  setLoading(true);
  setError(null);

  fetch(`http://localhost:8090/api/cursos/${courseId}`)
    .then((res) => {
      if (!res.ok) {
        throw new Error("Error al cargar el curso");
      }
      return res.json();
    })
    .then((data) => {
      console.log("Datos del curso recibidos:", data);
      if (data) {
        setFormData((prev) => ({
          ...prev,
          ...data,  // Actualiza formData con los datos del curso
        }));
      } else {
        throw new Error("Datos del curso vacíos");
      }
    })
    .catch((err) => {
      setError(err.message || "No se pudo cargar el curso");
    })
    .finally(() => {
      setLoading(false);
    });
}, [courseId, isOpen]);