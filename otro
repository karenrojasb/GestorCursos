Error: The final argument passed to useEffect changed size between renders. The order and size of this array must remain constant.

Previous: []
Incoming: []
    at createUnhandledError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:689:49)
    at handleClientError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:856:56)
    at console.error (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:991:56)
    at areHookInputsEqual (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:2961:56)
    at updateEffectImpl (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:3644:50)
    at Object.useEffect (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:12860:13)
    at exports.useEffect (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:1852:36)
    at CatalogoModal (http://localhost:3000/_next/static/chunks/app_94355b._.js?id=%255Bproject%255D%252Fapp%252Fcomponents%252Fcatalogomodal.tsx+%255Bapp-client%255D+%2528ecmascript%2529:30:180)
    at react-stack-bottom-frame (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:13403:24)
    at renderWithHooksAgain (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:3032:24)
    at renderWithHooks (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:2983:28)
    at updateFunctionComponent (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:4732:21)
    at beginWork (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:5364:24)
    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:631:20)
    at performUnitOfWork (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7955:97)
    at workLoopSync (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7847:40)
    at renderRootSync (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7830:13)
    at performWorkOnRoot (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7565:211)
    at performSyncWorkOnRoot (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:8402:9)
    at flushSyncWorkAcrossRoots_impl (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:8326:245)
    at flushSyncWork$1 (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7709:86)
    at Object.scheduleRefresh (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:298:13)
    at http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:395:33
    at Set.forEach (<anonymous>)
    at Object.performReactRefresh (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:388:38)
    at applyUpdate (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:885:31)
    at http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:893:13

useEffect(() => {
  const fetchCursos = async () => {
    if (!idEmp) {
      console.log("No hay idEmp, no se hace la petición.");
      return;
    }

    try {
      console.log(`Haciendo petición a: http://localhost:8090/api/cursos/usuario/${idEmp}`);
      const response = await fetch(`http://localhost:8090/api/cursos/usuario/${idEmp}`);
      
      console.log("Estado de la respuesta:", response.status);
      
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      
      const data = await response.json();
      console.log("Respuesta del backend:", data);

      if (data.success) {
        const hoy = new Date();
        const cursosActivos = data.cursos.filter((curso: Curso) => 
          !curso.Fin || new Date(curso.Fin) >= hoy
        );

        console.log("Cursos activos:", cursosActivos);

        setTimeout(() => {
          setCursos(cursosActivos);
          setCursosFiltrados(cursosActivos);
          setIsLoading(false);
        }, 1000);
      } else {
        throw new Error("No se pudieron obtener los cursos.");
      }
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
      setIsLoading(false);
    }
  };

  const storedIdEmp = localStorage.getItem("id_emp");
  console.log("ID del usuario guardado en localStorage:", storedIdEmp);

  if (storedIdEmp) {
    setIdEmp(Number(storedIdEmp));
  }

  if (idEmp) fetchCursos();
}, [idEmp]);
