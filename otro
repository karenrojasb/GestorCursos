import React, { useState } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  onSave: (data: any) => void;
  onClose: () => void;
}

export default function CursoModal({ onClose, onSave }: CursoModalProps) {
  const [curso, setCurso] = useState({
    NombreCurso: "",
    Valor: 0,
    Publico: 0,
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: 0,
    CupoMax: 0,
    Lugar: "",
    Linea: 0,
    Estado: 0,
    Modalidad: 0,
    Unidad: 0,
    Profesor: 0,
    SegundoPro: "",
    Proexterno: "",
    Descripcion: "",
    IdTipoCurso: 0,
  });

  // Manejar cambios en los inputs
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target;
    setCurso({
      ...curso,
      [name]: type === "number" ? Number(value) || 0 : value,
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({ ...curso });
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-3xl flex flex-col max-h-[80vh] overflow-y-auto">
        {/* Botón de cerrar */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-6 text-center text-[#990000]">
          Crear Curso
        </h2>

        {/* Formulario */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <label className="block font-semibold">Nombre del curso:</label>
          <input
            type="text"
            name="NombreCurso"
            value={curso.NombreCurso}
            onChange={handleChange}
            className="w-full p-2 border-2 border-gray-700 rounded-lg focus:outline-none focus:border-[#990000] transition"
            required
          />

          {[
            { label: "Valor", name: "Valor" },
            { label: "Público", name: "Publico" },
            { label: "Periodo", name: "Periodo", type: "text" },
            { label: "Inicio", name: "Inicio", type: "date" },
            { label: "Fin", name: "Fin", type: "date" },
            { label: "Horas", name: "Horas" },
            { label: "Cupo Máx", name: "CupoMax" },
            { label: "Lugar", name: "Lugar", type: "text" },
            { label: "Línea", name: "Linea" },
            { label: "Estado", name: "Estado" },
            { label: "Modalidad", name: "Modalidad" },
            { label: "Unidad", name: "Unidad" },
            { label: "Profesor", name: "Profesor" },
            { label: "Segundo Profesor", name: "SegundoPro", type: "text" },
            { label: "Profesor Externo", name: "Proexterno", type: "text" },
            { label: "Descripción", name: "Descripcion", type: "text" },
            { label: "ID Tipo de Curso", name: "IdTipoCurso" },
          ].map((field) => (
            <div key={field.name}>
              <label className="block font-semibold">{field.label}:</label>
              <input
                type={field.type || "number"}
                name={field.name}
                value={curso[field.name as keyof typeof curso]}
                onChange={handleChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>
          ))}

          {/* Botones */}
          <button
            type="submit"
            className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition"
          >
            Guardar
          </button>

          <button
            type="button"
            onClick={onClose}
            className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
          >
            Cancelar
          </button>
        </form>
      </div>
    </div>
  );
}
