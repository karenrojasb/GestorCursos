async obtenerCursosParaUsuario(idEmp: string) {
    try {
      // Buscar el usuario en la vista `gescur.emp_nomina` para obtener el valor de `publico`
      const usuario = await this.prisma.$queryRaw<
        { publico: number }[]
      >`SELECT publico FROM gescur.emp_nomina WHERE idEmp = ${idEmp}`;

      if (!usuario || usuario.length === 0) {
        throw new Error('Usuario no encontrado en gescur.emp_nomina');
      }

      const publico = usuario[0].publico;

      // Obtener los cursos seg√∫n el valor de `publico`
      let cursos;

      if (publico === 3) {
        // Si es 3, obtiene todos los cursos
        cursos = await this.prisma.$queryRaw`
          SELECT * FROM gescur.Cursos ORDER BY id OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
        `;
      } else {
        // Si es 1 o 2, solo muestra los cursos que coinciden con su `publico`
        cursos = await this.prisma.$queryRaw`
          SELECT * FROM gescur.Cursos 
          WHERE publico = ${publico}
          ORDER BY id OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
        `;
      }

      return cursos;
    } catch (error) {
      console.error('Error al obtener cursos:', error.message);
      throw new Error('No se pudieron obtener los cursos.');
    }
  }
