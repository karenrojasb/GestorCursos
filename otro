async getCoursesWithNotas(id_emp: string) {
  try {
    // Paso 1: Obtener los idInscrito relacionados al id_emp
    const inscritos = await this.prisma.$queryRaw<{ idInscrito: number, idCurso: number }[]>`
      SELECT id AS idInscrito, idCurso
      FROM gescur.inscripciones
      WHERE docInscr = CAST(${id_emp} AS VARCHAR)
    `;

    if (inscritos.length === 0) {
      return []; // No tiene inscripciones
    }

    const ids = inscritos.map(i => i.idInscrito);

    // Paso 2: Obtener las notas asociadas a los idInscrito
    const notas = await this.prisma.$queryRaw<
      { idInscrito: number, Nota: number, idRegistro: number, FechaRegistro: Date, idCurso: number, NombreCurso: string }[]
    >`
      SELECT 
        n.idInscrito,
        n.Nota,
        n.idRegistro,
        n.FechaRegistro,
        i.idCurso,
        c.NombreCurso
      FROM gescur.notas n
      JOIN gescur.inscripciones i ON n.idInscrito = i.id
      JOIN gescur.cursos c ON i.idCurso = c.id
      WHERE n.idInscrito IN (${Prisma.join(ids)})
    `;

    return notas;

  } catch (error) {
    console.error('Error al obtener cursos con notas:', error);
    throw new Error('No se pudieron obtener las notas del usuario');
  }
}



  // Obtener curso con notas del usuario
  @Get('usuario/:id_emp/notas')
  getCursosConNotas(@Param('id_emp') id_emp: string) {
    return this.cursosService.getCursosConNotas(id_emp);
  }

