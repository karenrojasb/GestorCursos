async obtenerCursosParaUsuario(idEmp: number) {
    // 1. Consultar la vista gescur.emp_nomina con SQL crudo
    const usuario = await this.prisma.$queryRaw<{ publico: number }[]>`
      SELECT publico FROM gescur.emp_nomina WHERE idEmp = ${idEmp} LIMIT 1
    `;

    if (!usuario || usuario.length === 0) {
      throw new NotFoundException("Usuario no encontrado");
    }

    const publico = usuario[0].publico;

    //  2. Obtener los cursos según el valor de `publico`
    return this.prisma.cursos.findMany({
      where: {
        OR: [
          { publico: 3 }, // Cursos para todos
          { publico: publico }, // Cursos específicos según `publico`
        ],
      },
    });
  }



  @Get("usuario")
  async obtenerCursos(@Query("idEmp") idEmp: string) {
    // Validar si idEmp está presente
    if (!idEmp) {
      throw new NotFoundException("El idEmp es requerido");
    }

    // Convertir idEmp a número
    const idEmpNumber = parseInt(idEmp, 10);
    if (isNaN(idEmpNumber)) {
      throw new NotFoundException("El idEmp debe ser un número válido");
    }

    // Llamar al servicio para obtener los cursos
    return await this.cursosService.obtenerCursosParaUsuario(idEmpNumber);
  }
