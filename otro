import { Body, Controller, Delete, Get, NotFoundException, Param, ParseIntPipe, Post, Put, Query } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}
@Get ('usuario/:id_emp')
  async obtenerCursos(@Param('id_emp') id_emp: string) {
    try {
      const cursos = await this.cursosService.obtenerCursosParaUsuario(id_emp);
      return { success: true, cursos};

    } catch (error) {
      return {success: false, message: error.message};
    }
  }
}



import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateCursoDto } from './dto/create-curso.dto';

@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}
  async obtenerCursosParaUsuario(id_emp: string) {
    try {
      // Buscar el usuario en la vista `gescur.emp_nomina` para obtener el valor de `publico`
      const usuario = await this.prisma.$queryRaw<
        { publico: number }[]
      >`SELECT publico FROM gescur.emp_nomina WHERE id_emp = ${id_emp}`;

      if (!usuario || usuario.length === 0) {
        throw new Error('Usuario no encontrado en gescur.emp_nomina');
      }

      const publico = usuario[0].publico;

      // Obtener los cursos seg√∫n el valor de `publico`
      let cursos;

      if (publico === 3) {
        // Si es 3, obtiene todos los cursos
        cursos = await this.prisma.$queryRaw`
          SELECT * FROM gescur.Cursos ORDER BY id OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
        `;
      } else {
        // Si es 1 o 2, solo muestra los cursos que coinciden con su `publico`
        cursos = await this.prisma.$queryRaw`
          SELECT * FROM gescur.Cursos 
          WHERE publico = ${publico}
          ORDER BY id OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY
        `;
      }

      return cursos;
    } catch (error) {
      console.error('Error al obtener cursos:', error.message);
      throw new Error('No se pudieron obtener los cursos.');
    }
  }


}
