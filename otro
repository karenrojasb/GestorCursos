import React, { useState, useEffect, useContext } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";
import { UsuarioContext } from "../layout"; // Importamos el contexto

interface CursoModalProps {
  idCur: number;
  onClose: () => void;
  onSave: (data: { idCur: number; docInscr: string }) => void;
  onInscripcionExitosa: () => void;
}

export default function CursoModal({ idCur, onClose, onSave, onInscripcionExitosa }: CursoModalProps) {
  const { usuario } = useContext(UsuarioContext); // Obtenemos el usuario del contexto
  const [cargando, setCargando] = useState(false);
  const [mensaje, setMensaje] = useState("");
  const [inscrito, setInscrito] = useState(false);

  useEffect(() => {
    if (!usuario) return;
    const verificarInscripcion = async () => {
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${usuario.id}`);
        setInscrito(response.ok);
      } catch (error) {
        console.error("Error al verificar inscripción:", error);
      }
    };
    verificarInscripcion();
  }, [idCur, usuario]);

  const handleInscribir = async () => {
    if (!usuario) return;
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idCur, docInscr: usuario.id }),
      });

      if (!response.ok) throw new Error("Error al inscribir usuario.");

      setMensaje("Inscripción realizada con éxito.");
      setInscrito(true);
      onInscripcionExitosa();
      onSave({ idCur, docInscr: usuario.id });
    } catch {
      setMensaje("Hubo un problema al inscribir.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">
        <button className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]" onClick={onClose}>
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-4 text-center text-[#990000]">
          {inscrito ? "Cancelar Inscripción" : "Inscribir Usuario"}
        </h2>

        {mensaje && <p className="text-center text-sm font-semibold text-red-600">{mensaje}</p>}

        <button
          onClick={handleInscribir}
          className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg"
          disabled={cargando}
        >
          {cargando ? "Inscribiendo..." : "Inscribir"}
        </button>
      </div>
    </div>
  );
}