import { useState } from "react";
import { motion } from "framer-motion";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  onClose: () => void;
  onSave: (data: CursoFormData) => void;
}

interface CursoFormData {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Horarios: Record<string, string>;
  Linea: number;
  Estado: number;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: number;
  Descripcion: string;
  IdTipoCurso: number;
}

export default function CursoModal({ onClose, onSave }: CursoModalProps) {
  const [formData, setFormData] = useState<CursoFormData>({
    id: 0,
    NombreCurso: "",
    Valor: 0,
    Publico: 0,
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: 0,
    CupoMax: 0,
    Lugar: "",
    Horarios: {
      LunesIni: "",
      LunesFin: "",
      MartesIni: "",
      MartesFin: "",
      MiercolesIni: "",
      MiercolesFin: "",
      JuevesIni: "",
      JuevesFin: "",
      ViernesIni: "",
      ViernesFin: "",
      SabadoIni: "",
      SabadoFin: "",
      DomingoIni: "",
      DomingoFin: "",
    },
    Linea: 0,
    Estado: 0,
    Modalidad: 0,
    Unidad: 0,
    Profesor: 0,
    SegundoPro: "",
    Proexterno: 0,
    Descripcion: "",
    IdTipoCurso: 0,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;

    setFormData((prevData) => {
      if (name in prevData.Horarios) {
        return {
          ...prevData,
          Horarios: {
            ...prevData.Horarios,
            [name]: value,
          },
        };
      }

      return {
        ...prevData,
        [name]: value,
      };
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.8 }}
        className="bg-white p-6 rounded-lg shadow-lg w-11/12 max-w-4xl relative"
      >
        {/* BOTÓN CERRAR */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-red-600 transition-transform duration-300 transform hover:rotate-90"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        {/* TÍTULO */}
        <h2 className="text-2xl font-bold text-[#990000] mb-4 text-center">
          Crear Curso
        </h2>

        {/* SCROLLABLE FORMULARIO */}
        <div className="max-h-[80vh] overflow-y-auto pr-2">
          <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-4">
            <input name="NombreCurso" placeholder="Nombre del Curso" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Valor" type="number" placeholder="Valor" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Publico" type="number" placeholder="Público" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Periodo" placeholder="Periodo" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Inicio" type="date" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Fin" type="date" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Horas" type="number" placeholder="Horas" onChange={handleChange} className="border p-2 rounded" required />
            <input name="CupoMax" type="number" placeholder="Cupo Máximo" onChange={handleChange} className="border p-2 rounded" required />
            <input name="Lugar" placeholder="Lugar" onChange={handleChange} className="border p-2 rounded" required />

            {/* HORARIOS */}
            <div className="col-span-2 grid grid-cols-3 gap-4">
              {Object.keys(formData.Horarios).map((dia) => (
                <input
                  key={dia}
                  name={dia}
                  type="time"
                  placeholder={dia.replace("Ini", " Inicio").replace("Fin", " Fin")}
                  onChange={handleChange}
                  className="border p-2 rounded"
                />
              ))}
            </div>

            {/* DATOS ADICIONALES */}
            <input name="Linea" type="number" placeholder="Línea" onChange={handleChange} className="border p-2 rounded" />
            <input name="Estado" type="number" placeholder="Estado" onChange={handleChange} className="border p-2 rounded" />
            <input name="Modalidad" type="number" placeholder="Modalidad" onChange={handleChange} className="border p-2 rounded" />
            <input name="Unidad" type="number" placeholder="Unidad" onChange={handleChange} className="border p-2 rounded" />
            <input name="Profesor" type="number" placeholder="Profesor" onChange={handleChange} className="border p-2 rounded" />
            <input name="SegundoPro" placeholder="Segundo Profesor" onChange={handleChange} className="border p-2 rounded" />
            <input name="Proexterno" type="number" placeholder="Profesor Externo" onChange={handleChange} className="border p-2 rounded" />
            <input name="IdTipoCurso" type="number" placeholder="ID Tipo Curso" onChange={handleChange} className="border p-2 rounded" />
            <textarea name="Descripcion" placeholder="Descripción" onChange={handleChange} className="border p-2 rounded col-span-2 h-20"></textarea>

            {/* BOTÓN GUARDAR */}
            <button
              type="submit"
              className="col-span-2 bg-[#990000] text-white py-2 rounded-lg shadow-md transition-all hover:shadow-lg"
            >
              Guardar Curso
            </button>
          </form>
        </div>
      </motion.div>
    </div>
  );
}