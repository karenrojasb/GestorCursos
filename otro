async obtenerCursosParaUsuario(idEmp: number) {
  // Obtener el "publico" del usuario desde la tabla emp_nomina
  const usuario = await this.prisma.emp_nomina.findUnique({
    where: { id_emp: idEmp },
    select: { publico: true },
  });

  if (!usuario) {
    throw new NotFoundException("Usuario no encontrado.");
  }

  let cursos;
  if (usuario.publico === 1) {
    // Solo cursos donde el idEmp es igual al del usuario
    cursos = await this.prisma.cursos.findMany({
      where: { idEmp: idEmp },
    });
  } else if (usuario.publico === 2) {
    // Cursos donde el público es 2
    cursos = await this.prisma.cursos.findMany({
      where: { publico: 2 },
    });
  } else {
    // Público 3: Puede ver todos los cursos
    cursos = await this.prisma.cursos.findMany();
  }

  return cursos;
}