const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
  const { name, value } = e.target;

  // Lista de los campos que deben ser numéricos
  const camposNumericos = [
    "Publico", "Linea", "Estado", "Modalidad", 
    "Unidad", "Profesor", "SegundoPro", "IdTipoCurso", "Valor", "Horas", "CupoMax"
  ];

  // Convertir a número solo los campos que deben serlo
  setEditandoCurso((prevCurso) => {
    if (!prevCurso) return prevCurso;

    // Para campos numéricos, aseguramos que se convierta en número o en null
    const nuevoValor = camposNumericos.includes(name)
      ? (value ? parseInt(value, 10) : null)
      : value;

    return {
      ...prevCurso,
      [name]: nuevoValor,
    };
  });

  console.log(`Campo actualizado: ${name}, Nuevo valor: ${value}`);
};


const handleGuardarEdicion = async () => {
  if (!editandoCurso) return;

  console.log("Intentando guardar cambios...");
  console.log("Datos enviados al backend:", JSON.stringify(editandoCurso, null, 2));

  // Asegurarse de que los campos numéricos estén bien establecidos antes de enviar
  const datosAEnviar = { ...editandoCurso };

  // Asegurar que los campos numéricos sean válidos
  const camposNumericos = [
    "Publico", "Linea", "Estado", "Modalidad", 
    "Unidad", "Profesor", "SegundoPro", "IdTipoCurso", "Valor", "Horas", "CupoMax"
  ];

  camposNumericos.forEach((campo) => {
    if (datosAEnviar[campo] === "" || datosAEnviar[campo] === null) {
      datosAEnviar[campo] = null;  // Establecer como null si está vacío
    } else {
      datosAEnviar[campo] = parseInt(datosAEnviar[campo], 10);  // Convertir a número
    }
  });

  setIsLoading(true);
  try {
    const response = await fetch(`http://localhost:8090/api/cursos/${editandoCurso.id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(datosAEnviar),
    });

    if (!response.ok) {
      console.error("Error HTTP al actualizar:", response.status);
      const errorText = await response.text();
      console.error("Respuesta del servidor:", errorText);
      return;
    }

    console.log("Curso actualizado con éxito");

    setMensajeExito("¡Curso actualizado con éxito!");

    // RECARGAR DESPUES DE LA ACTUALIZACIÓN DEL CURSO
    await fetchCursos();

    // CERRAR MODA DE EDICIÓN
    setTimeout(() => {
      setMensajeExito("");
      setEditandoCurso(null);
    }, 3000);

  } catch (error) {
    console.error("Error al guardar la edición:", error);
  }
  setIsLoading(false);
};
