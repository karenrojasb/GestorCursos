import { useState, useEffect } from "react";

interface Curso {
  id: number;
  nombre_curso: string;
  valor: number;
  publico: number;
  periodo: string;
  inicio: string;
  fin: string;
  horas: number;
}

export default function CatalogoModal({ onClose, id_emp }: { onClose: () => void, id_emp: number }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [searchTerm, setSearchTerm] = useState<string>("");

  // OBTENER CURSOS SEGÚN EL USUARIO
  const fetchCursos = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/usuario/${id_emp}`);
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      const data = await response.json();
      setCursos(data);
      setCursosFiltrados(data);
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
    }
    setIsLoading(false);
  };

  useEffect(() => {
    if (id_emp) {
      fetchCursos();
    }
  }, [id_emp]);

  // FILTRAR CURSOS POR NOMBRE
  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    const term = event.target.value.toLowerCase();
    setSearchTerm(term);
    setCursosFiltrados(cursos.filter(curso => curso.nombre_curso.toLowerCase().includes(term)));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-[90%] md:w-[60%] lg:w-[50%]">
        <h2 className="text-2xl font-bold text-[#990000] mb-4">Catálogo de Cursos</h2>

        <input
          type="text"
          placeholder="Buscar curso..."
          value={searchTerm}
          onChange={handleSearch}
          className="w-full p-2 border border-gray-300 rounded mb-4"
        />

        {isLoading ? (
          <p className="text-center">Cargando cursos...</p>
        ) : (
          <div className="max-h-80 overflow-y-auto">
            {cursosFiltrados.length === 0 ? (
              <p className="text-center text-gray-500">No hay cursos disponibles</p>
            ) : (
              <table className="w-full border-collapse border border-gray-300">
                <thead>
                  <tr className="bg-gray-200">
                    <th className="border border-gray-300 p-2">Nombre</th>
                    <th className="border border-gray-300 p-2">Inicio</th>
                    <th className="border border-gray-300 p-2">Fin</th>
                    <th className="border border-gray-300 p-2">Acciones</th>
                  </tr>
                </thead>
                <tbody>
                  {cursosFiltrados.map((curso) => (
                    <tr key={curso.id} className="text-center">
                      <td className="border border-gray-300 p-2">{curso.nombre_curso}</td>
                      <td className="border border-gray-300 p-2">{curso.inicio}</td>
                      <td className="border border-gray-300 p-2">{curso.fin}</td>
                      <td className="border border-gray-300 p-2">
                        <button className="bg-[#990000] text-white px-3 py-1 rounded hover:bg-red-700">
                          Inscribirse
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        )}

        <div className="mt-4 flex justify-end">
          <button onClick={onClose} className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700">
            Cerrar
          </button>
        </div>
      </div>
    </div>
  );
}