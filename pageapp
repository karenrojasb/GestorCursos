import { useState, useEffect } from "react";

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState([]);
  const [cursosFiltrados, setCursosFiltrados] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [id_emp, setIdEmp] = useState<number | null>(null);

  useEffect(() => {
    // Intentar recuperar id_emp desde localStorage
    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      setIdEmp(parseInt(storedIdEmp, 10));
    } else {
      setError("Usuario no válido");
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    if (!id_emp) return;

    const fetchCursos = async () => {
      try {
        const response = await fetch(`http://localhost:8090/api/cursos/usuario/${id_emp}`);
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const data = await response.json();
        if (!Array.isArray(data)) throw new Error("Respuesta inesperada del servidor");

        setCursos(data);
        setCursosFiltrados(data);
        setError(null);
      } catch (error) {
        console.error("Error al obtener los cursos:", error);
        setError("No se pudieron cargar los cursos. Intenta de nuevo más tarde.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCursos();
  }, [id_emp]);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-[90%] md:w-[60%] lg:w-[50%]">
        <h2 className="text-2xl font-bold text-[#990000] mb-4">Catálogo de Cursos</h2>

        {error ? (
          <p className="text-center text-red-500">{error}</p>
        ) : isLoading ? (
          <p className="text-center text-blue-600 font-semibold">Cargando cursos...</p>
        ) : cursosFiltrados.length === 0 ? (
          <p className="text-center text-gray-500">No hay cursos disponibles</p>
        ) : (
          <div className="max-h-80 overflow-y-auto border border-gray-300 rounded-md">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-300 p-2">Nombre</th>
                  <th className="border border-gray-300 p-2">Inicio</th>
                  <th className="border border-gray-300 p-2">Fin</th>
                  <th className="border border-gray-300 p-2">Acciones</th>
                </tr>
              </thead>
              <tbody>
                {cursosFiltrados.map((curso) => (
                  <tr key={curso.id} className="text-center">
                    <td className="border border-gray-300 p-2">{curso.nombre_curso}</td>
                    <td className="border border-gray-300 p-2">{curso.inicio}</td>
                    <td className="border border-gray-300 p-2">{curso.fin}</td>
                    <td className="border border-gray-300 p-2">
                      <button className="bg-[#990000] text-white px-3 py-1 rounded hover:bg-red-700">
                        Inscribirse
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <div className="mt-4 flex justify-end">
          <button onClick={onClose} className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-700">
            Cerrar
          </button>
        </div>
      </div>
    </div>
  );
}