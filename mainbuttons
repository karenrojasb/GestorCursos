"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import CatalogoModal from "./catalogomodal";
import CatalogoAdminModal from "./catalogoadminmodal";
import CursoModal from "./CursoModal";
import InscripcionesModal from "./InscripcionesModal"; // Agregar importación del nuevo modal
import {
  BookOpenIcon,
  DocumentCheckIcon,
  PencilIcon,
  XMarkIcon,
  DocumentIcon,
  ClipboardDocumentListIcon
} from "@heroicons/react/24/solid";
import { PencilSquareIcon } from "@heroicons/react/16/solid";

interface MainButtonsProps {
  onSelect: (section: string) => void;
  publico: number;
  esAdmin: boolean; 
}

export default function MainButtons({ onSelect, publico, esAdmin }: MainButtonsProps) {
  const [showCatalogo, setShowCatalogo] = useState(false);
  const [showGestorModal, setShowGestorModal] = useState(false);
  const [showCatalogoAdmin, setShowCatalogoAdmin] = useState(false);
  const [showCursoModal, setShowCursoModal] = useState(false);
  const [showInscripcionesModal, setShowInscripcionesModal] = useState(false); // Nuevo estado

  useEffect(() => {
    console.log("Valor de publico:", publico);
    console.log("Valor de esAdmin:", esAdmin);
  }, [publico, esAdmin]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen w-full">
      <div className="w-full max-w-md flex flex-col space-y-4 items-center">

        {/* BOTÓN GESTOR DE CURSOS */}
        {esAdmin && (
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => setShowGestorModal(true)}
            className="flex items-center justify-center gap-3 w-4/5 bg-[#990000] 
                       text-white py-3 rounded-lg shadow-md transition-all hover:shadow-lg"
          >
            <PencilIcon className="h-6 w-6 text-white" />
            Gestor de Cursos
          </motion.button>
        )}

        {/* MODAL GESTOR DE CURSOS */}
        {showGestorModal && (
          <div className="p-6 rounded-lg shadow-lg fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="relative flex flex-col items-center gap-3 w-full max-w-3xl bg-white 
                            py-6 px-8 rounded-lg shadow-md">
              {/* BOTÓN CERRAR */}
              <button
                onClick={() => setShowGestorModal(false)}
                className="absolute top-2 right-2 text-gray-500 hover:text-[#990000] transition-transform duration-300 transform hover:rotate-90 hover:scale-110"
              >
                <XMarkIcon className="h-6 w-6" />
              </button>

              {/* TÍTULO */}
              <h2 className="text-3xl font-bold text-[#990000] text-center">Gestor de Cursos</h2>

              <div className="w-full flex flex-col items-center justify-center space-y-3 text-center">
                {/* BOTÓN CREAR CURSO */}
                <motion.button
                  whileHover={{ scale: 1.1, backgroundColor: "#b30000" }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowCursoModal(true)}
                  className="flex items-center gap-3 w-4/5 bg-[#990000] text-white py-3 rounded-lg transition-all hover:shadow-lg justify-center"
                >
                  <PencilSquareIcon className="h-6 w-6 text-white" />
                  Crear Curso
                </motion.button>

                {/* BOTÓN VER INSCRIPCIONES */}
                <motion.button
                  whileHover={{ scale: 1.1, backgroundColor: "#b30000" }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowInscripcionesModal(true)}
                  className="flex items-center gap-3 w-4/5 bg-[#990000] text-white py-3 rounded-lg transition-all hover:shadow-lg justify-center"
                >
                  <ClipboardDocumentListIcon className="h-6 w-6 text-white" />
                  Ver Inscripciones
                </motion.button>
              </div>
            </div>
          </div>
        )}

        {/* MODALES */}
        {showCursoModal && <CursoModal onClose={() => setShowCursoModal(false)} />}
        {showInscripcionesModal && <InscripcionesModal onClose={() => setShowInscripcionesModal(false)} />}
      </div>
    </div>
  );
}