"use client";
import { TrashIcon, XMarkIcon, MagnifyingGlassIcon, PencilSquareIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  LunesIni?: string;
  LunesFin?: string;
  MartesIni?: string;
  MartesFin?: string;
  MiercolesIni?: string;
  MiercolesFin?: string;
  JuevesIni?: string;
  JuevesFin?: string;
  ViernesIni?: string;
  ViernesFin?: string;
  SabadoIni?: string;
  SabadoFin?: string;
  DomingoIni?: string;
  DomingoFin?: string;
  Linea: number;
  Estado: number;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: number;
  Descripcion: string;
  IdTipoCurso: number;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [editandoCurso, setEditandoCurso] = useState<Curso | null>(null);
  const [mensajeExito, setMensajeExito] = useState("");

  // OBTENER CURSOS DEL BACKEND
  const fetchCursos = async () => {
    try {
      const response = await fetch("http://localhost:8090/api/cursos");
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      const data = await response.json();
      setCursos(data);
      setCursosFiltrados(data);
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
    }
  };

  // CARGAR CURSOS AL MONTAR EL COMPONENTE
  useEffect(() => {
    fetchCursos();
  }, []);

  // BUSCAR CURSOS POR NOMBRE
  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter(curso => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  // EXPANDIR DETALLES DEL CURSO
  const handleVerMas = (id: number) => {
    setExpandedCursoId(expandedCursoId === id ? null : id);
  };

  // ELIMINAR CURSO
  const handleDeleteCourse = async (id: number) => {
    const confirmar = window.confirm("¿Estás seguro de que deseas eliminar este curso?");
    if (!confirmar) return;

    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${id}`, {
        method: "DELETE",
      });
      if (!response.ok) {
        console.error("Error al eliminar el curso:", response.status);
        return;
      }
      setMensajeExito("Curso eliminado correctamente");
      setTimeout(() => setMensajeExito(""), 3000);
      setCursos(prevCursos => prevCursos.filter(curso => curso.id !== id));
      setCursosFiltrados(prevCursos => prevCursos.filter(curso => curso.id !== id));
    } catch (error) {
      console.error("Error al eliminar el curso", error);
      alert("No se pudo eliminar el curso");
    }
  };

  // INICIAR EDICIÓN DEL CURSO
  const handleEditar = (curso: Curso) => {
    setEditandoCurso({ ...curso });
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!editandoCurso) return;
    const { name, value } = e.target;

    setEditandoCurso(prev => ({
      ...prev!,
      [name]: isNaN(Number(value)) ? value : Number(value),
    }));
  };

  // GUARDAR CAMBIOS AL EDITAR
  const handleGuardarEdicion = async () => {
    if (!editandoCurso) return;

    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${editandoCurso.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editandoCurso),
      });

      if (!response.ok) {
        console.error("Error al actualizar:", response.status);
        return;
      }

      setMensajeExito("¡Curso actualizado con éxito!");
      await fetchCursos();
      setTimeout(() => {
        setMensajeExito("");
        setEditandoCurso(null);
      }, 3000);
    } catch (error) {
      console.error("Error al guardar la edición:", error);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto">
        
        {/* BOTÓN CERRAR */}
        <button className="absolute top-4 right-4 text-gray-500 hover:text-red-600" onClick={onClose}>
          <XMarkIcon className="w-6 h-6" />
        </button>

        {/* BARRA DE BÚSQUEDA */}
        <div className="flex items-center space-x-2 mb-4">
          <button
            onClick={() => setIsSearchActive(!isSearchActive)}
            className="p-2 rounded-full bg-gray-200">
            {isSearchActive ? <XMarkIcon className="h-6 w-6 text-red-600" /> : <MagnifyingGlassIcon className="h-6 w-6 text-red-600" />}
          </button>
          <input
            type="text"
            placeholder="Buscar curso"
            value={busqueda}
            onChange={handleBuscar}
            className={`px-4 py-2 border rounded-full transition-all duration-500 ease-in-out ${
              isSearchActive ? "w-96 opacity-100 bg-white shadow-md" : "w-0 opacity-0"
            } focus:outline-none`}
          />
        </div>

        {/* LISTA DE CURSOS */}
        <div className="flex-1 overflow-y-auto max-h-[60vh] space-y-2">
          {cursosFiltrados.length > 0 ? (
            cursosFiltrados.map(curso => (
              <div key={curso.id} className="border-b py-2">
                <span>{curso.NombreCurso}</span>
                <span>{curso.Inicio || "dd/mm/aaaa"}</span>
                <button onClick={() => handleDeleteCourse(curso.id)}>
                  <TrashIcon className="h-5 w-5 text-red-600" />
                </button>
              </div>
            ))
          ) : (
            <p className="text-center py-4">No hay cursos disponibles.</p>
          )}
        </div>
      </div>
    </div>
  );
}