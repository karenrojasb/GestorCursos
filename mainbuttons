"use client";
import { ReactNode, useState } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import MainButtonsProps from "./components/mainbuttons";
import "./globals.css";

interface LayoutProps {
  children: ReactNode;
}

interface Usuario {
  nombre: string;
  publico: number; // 1 = Profesor, 2 = Finanzas
  esAdmin: boolean; // true si es administrador
}

export default function RootLayout({ children }: LayoutProps) {
  const [usuario, setUsuario] = useState<Usuario | null>(null);
  const [id_emp, setIdEmp] = useState("");
  const [error, setError] = useState("");

  // FUNCIÓN PARA INICIAR SESIÓN Y OBTENER DATOS DEL USUARIO
  const iniciarSesion = async () => {
    setError("");

    if (id_emp.trim() === "") {
      setError("Ingrese su Documento.");
      return;
    }

    try {
      const response = await fetch("http://localhost:8090/api/usuario/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id_emp }),
      });

      const data = await response.json();
      console.log("Datos recibidos del backend:", data); // <-- Verifica qué devuelve

      if (!response.ok) {
        throw new Error(data.message || "El documento no es correcto.");
      }

      // Verificación de si el usuario está en las tablas
      if (data.publico === null || data.publico === undefined) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      // Verificamos si el usuario tiene un rol permitido
      const esUsuarioValido = data.publico === 1 || data.publico === 2 || Boolean(data.esAdmin);
      if (!esUsuarioValido) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      // Definimos el usuario con su rol
      setUsuario({
        nombre: data.nombre,
        publico: data.publico, // 1 = Profesor, 2 = Finanzas
        esAdmin: Boolean(data.esAdmin), // Convertimos null en false
      });
    } catch (error: any) {
      setError(error.message);
    }
  };

  // RENDERIZA EL FORMULARIO DE LOGIN SI NO HAY USUARIO
  if (!usuario) {
    return (
      <html lang="es">
        <body className="flex items-center justify-center h-screen bg-gray-200">
          <div className="bg-white p-6 rounded-lg shadow-lg w-80 text-center">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Iniciar Sesión</h2>
            <input
              type="text"
              placeholder="Ingrese su ID"
              value={id_emp}
              onChange={(e) => setIdEmp(e.target.value)}
              className="border p-2 w-full mb-3 rounded"
            />
            <button
              onClick={iniciarSesion}
              className="bg-[#990000] text-white px-4 py-2 rounded w-full hover:bg-red-700 transition"
            >
              Entrar
            </button>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </div>
        </body>
      </html>
    );
  }

  // SI EL USUARIO YA ESTÁ AUTENTICADO, MUESTRA LA INTERFAZ PRINCIPAL
  return (
    <html lang="es">
      <body className="bg-gray-100 flex flex-col min-h-screen">
        <header className="w-full flex items-center justify-between px-6 py-4 bg-white shadow-md">
          <img
            src="/img/ecijg126.png"
            alt="Logo"
            className="h-20 transition-transform duration-300 ease-in-out hover:scale-110 active:scale-95"
          />
          <div className="flex flex-col items-center ml-auto">
            <span className="text-xl font-medium text-gray-700">{usuario.nombre}</span>
            <button
              className="border border-[#990000] px-3 py-2 rounded hover:bg-[#990000] hover:text-white transition"
              onClick={() => setUsuario(null)}
            >
              Cerrar Sesión
            </button>
          </div>
        </header>

        <main className="flex flex-col items-center justify-center flex-1 p-6">
          <motion.h1
            className="text-3xl font-bold text-[#990000] mb-6 text-center"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Bienvenido a Gestión de Cursos
          </motion.h1>

          {/* PASAMOS LOS ROLES AL COMPONENTE DE BOTONES */}
          <MainButtonsProps publico={usuario.publico} esAdmin={usuario.esAdmin} onSelect={() => {}} />

          {children}
        </main>

        <footer className="bg-white text-center py-4 shadow-inner w-full">
          <div className="flex items-center justify-between px-6">
            <p className="text-gray-700">
              &copy; {new Date().getFullYear()} - Plataforma de gestión de cursos
            </p>
            <Image src="/img/osiris 2.png" alt="Logo OSIRIS" width={160} height={60} />
          </div>
        </footer>
      </body>
    </html>
  );
}


import React, { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  idCur: number; // ID del curso al que se inscribe
  onClose: () => void;
  onSave: (data: { idCur: number; docInscr: string }) => void;
  onInscripcionExitosa: () => void;
}

export default function CursoModal({ idCur, onClose, onSave, onInscripcionExitosa }: CursoModalProps) {
  const [docInscr, setDocInscr] = useState(""); // Documento del usuario
  const [cargando, setCargando] = useState(false);
  const [mensaje, setMensaje] = useState("");
  const [inscrito, setInscrito] = useState(false); // Estado para saber si está inscrito

  // Obtener ID del usuario desde el login
  useEffect(() => {
    const usuarioLogueado = localStorage.getItem("usuario"); // Asumiendo que se guarda en localStorage
    if (usuarioLogueado) {
      const usuario = JSON.parse(usuarioLogueado);
      setDocInscr(usuario.id); // Asumimos que el campo correcto es `id`
    }
  }, []);

  // Verificar si el usuario ya está inscrito en el curso
  useEffect(() => {
    const verificarInscripcion = async () => {
      if (!docInscr) return; // No verificar si no hay usuario logueado
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`);
        setInscrito(response.ok); // Si responde OK, está inscrito
      } catch (error) {
        console.error("Error al verificar inscripción:", error);
      }
    };

    verificarInscripcion();
  }, [idCur, docInscr]);

  // Inscribirse al curso
  const handleInscribir = async (e: React.FormEvent) => {
    e.preventDefault();
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idCur, docInscr }),
      });

      if (!response.ok) throw new Error("Error al inscribir usuario.");

      setMensaje("Inscripción realizada con éxito.");
      setInscrito(true); // Marcar como inscrito
      onInscripcionExitosa();
      onSave({ idCur, docInscr });
    } catch (error) {
      setMensaje("Hubo un problema al inscribir.");
    } finally {
      setCargando(false);
    }
  };

  // Cancelar inscripción
  const handleCancelarInscripcion = async () => {
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`, {
        method: "DELETE",
      });

      if (!response.ok) throw new Error("Error al cancelar la inscripción.");

      setMensaje("Inscripción cancelada.");
      setInscrito(false); // Marcar como no inscrito
      onInscripcionExitosa();
    } catch (error) {
      setMensaje("Hubo un problema al cancelar la inscripción.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">
        
        {/* Botón de cerrar */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-4 text-center text-[#990000]">
          {inscrito ? "Cancelar Inscripción" : "Inscribir Usuario"}
        </h2>

        {/* Mensaje de error o éxito */}
        {mensaje && (
          <p className={`text-center text-sm font-semibold ${mensaje.includes("éxito") ? "text-green-600" : "text-red-600"}`}>
            {mensaje}
          </p>
        )}

        {/* Botón de inscripción o cancelación */}
        {inscrito ? (
          <button
            type="button"
            onClick={handleCancelarInscripcion}
            className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
            disabled={cargando}
          >
            {cargando ? "Cancelando..." : "Cancelar Inscripción"}
          </button>
        ) : (
          <button
            onClick={handleInscribir}
            className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition"
            disabled={cargando}
          >
            {cargando ? "Inscribiendo..." : "Inscribir"}
          </button>
        )}

        <button
          type="button"
          onClick={onClose}
          className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
        >
          Cerrar
        </button>
      </div>
    </div>
  );
}
