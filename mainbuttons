import React, { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  onClose: () => void;
  onSave: (data: { nombreCurso: string; valor: number }) => void;
}

export default function CursoModal({ onClose, onSave }: CursoModalProps) {
  const [rol, setRol] = useState<number | null>(null); // 3: Administrador
  const [nombreCurso, setNombreCurso] = useState("");
  const [valor, setValor] = useState("");
  const [cargando, setCargando] = useState(false);
  const [mensaje, setMensaje] = useState("");

  // Obtener el rol del usuario logueado
  useEffect(() => {
    const usuarioLogueado = localStorage.getItem("usuario");
    if (usuarioLogueado) {
      const usuario = JSON.parse(usuarioLogueado);

      // Consultar en la base de datos su rol
      fetch(`http://localhost:8090/api/usuarios/${usuario.id}`)
        .then((res) => res.json())
        .then((data) => setRol(data.publico)) // 3: Administrador
        .catch((error) => console.error("Error al obtener rol:", error));
    }
  }, []);

  // Crear curso (Solo administradores)
  const handleCrearCurso = async (e: React.FormEvent) => {
    e.preventDefault();
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch("http://localhost:8090/api/cursos", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ nombre_curso: nombreCurso, valor: Number(valor) }),
      });

      if (!response.ok) throw new Error("Error al crear el curso.");

      setMensaje("Curso creado con éxito.");
      onSave({ nombreCurso, valor: Number(valor) });
      onClose();
    } catch (error) {
      setMensaje("Hubo un problema al crear el curso.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">

        {/* Botón Cerrar */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-4 text-center text-[#990000]">Crear Curso</h2>

        {/* Mensaje de error o éxito */}
        {mensaje && (
          <p className={`text-center text-sm font-semibold ${mensaje.includes("éxito") ? "text-green-600" : "text-red-600"}`}>
            {mensaje}
          </p>
        )}

        {/* Formulario para crear curso (Solo si el usuario es Administrador) */}
        {rol === 3 ? (
          <form onSubmit={handleCrearCurso}>
            <input
              type="text"
              placeholder="Nombre del curso"
              value={nombreCurso}
              onChange={(e) => setNombreCurso(e.target.value)}
              className="w-full p-2 border rounded mb-2"
              required
            />
            <input
              type="number"
              placeholder="Valor"
              value={valor}
              onChange={(e) => setValor(e.target.value)}
              className="w-full p-2 border rounded mb-2"
              required
            />
            <button type="submit" className="w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition">
              {cargando ? "Creando..." : "Crear Curso"}
            </button>
          </form>
        ) : (
          <p className="text-center text-red-600 font-semibold">
            No tienes permisos para crear cursos.
          </p>
        )}
      </div>
    </div>
  );
}