import { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface Inscripcion {
  id: number;
  idCur?: number;
  Cursos?: {
    id: number;
    NombreCurso: string;
  };
  cursos?: {
    id: number;
    NombreCurso: string;
  };
  docInscr: string;
  est: string;
  fecreg: string;
}

interface InscripcionesModalProps {
  onClose: () => void;
}

export default function InscripcionesModal({ onClose }: InscripcionesModalProps) {
  const [inscripciones, setInscripciones] = useState<Inscripcion[]>([]);
  const [expandedCourses, setExpandedCourses] = useState<{ [key: number]: boolean }>({});

  useEffect(() => {
    const fetchInscripciones = async () => {
      try {
        const response = await fetch("http://localhost:8090/api/inscripciones");
        if (!response.ok) throw new Error("Error al obtener inscripciones");

        const data: Inscripcion[] = await response.json();
        console.log("üìå Datos recibidos en el frontend:", data);

        setInscripciones(data);
      } catch (error) {
        console.error("‚ùå Error al obtener inscripciones:", error);
      }
    };

    fetchInscripciones();
  }, []);

  // Agrupar inscripciones por idCur
  const groupedInscripciones = inscripciones.reduce((acc, inscripcion) => {
    const cursoId = inscripcion.idCur || inscripcion.Cursos?.id || inscripcion.cursos?.id || 0;
    if (!acc[cursoId]) {
      acc[cursoId] = [];
    }
    acc[cursoId].push(inscripcion);
    return acc;
  }, {} as { [key: number]: Inscripcion[] });

  // Alternar expansi√≥n de curso
  const toggleExpand = (cursoId: number) => {
    setExpandedCourses((prev) => ({ ...prev, [cursoId]: !prev[cursoId] }));
  };

  return (
    <div className="p-6 rounded-lg shadow-lg fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative flex flex-col items-center gap-4 w-full max-w-4xl bg-white py-6 px-8 rounded-lg shadow-md">
        
        {/* BOT√ìN CERRAR */}
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-[#990000] transition-transform duration-300 transform hover:rotate-90 hover:scale-110"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        {/* T√çTULO */}
        <h2 className="text-3xl font-bold text-[#990000] text-center">Lista de Inscripciones</h2>

        {/* LISTA DE INSCRIPCIONES CON SCROLL */}
        <div className="w-full max-h-80 overflow-auto border border-gray-300 rounded-md shadow-sm">
          {Object.entries(groupedInscripciones).length > 0 ? (
            <table className="w-full border-collapse border border-gray-300">
              <thead className="bg-gray-200 text-gray-700">
                <tr>
                  <th className="border p-2">ID Curso</th>
                  <th className="border p-2">Nombre del Curso</th>
                  <th className="border p-2">Fecha Registro</th>
                  <th className="border p-2">Acciones</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(groupedInscripciones).map(([cursoId, inscripciones]) => {
                  const curso = inscripciones[0]; // Tomamos el primer elemento para mostrar el nombre y la fecha
                  return (
                    <tbody key={cursoId}>
                      {/* FILA PRINCIPAL DEL CURSO */}
                      <tr className="text-center hover:bg-gray-100 transition">
                        <td className="border p-2">{cursoId}</td>
                        <td className="border p-2">{curso.Cursos?.NombreCurso || curso.cursos?.NombreCurso || "Desconocido"}</td>
                        <td className="border p-2">{new Date(curso.fecreg).toLocaleDateString()}</td>
                        <td className="border p-2">
                          <button
                            onClick={() => toggleExpand(Number(cursoId))}
                            className="text-blue-500 hover:text-blue-700"
                          >
                            {expandedCourses[Number(cursoId)] ? "Ver menos" : "Ver m√°s"}
                          </button>
                        </td>
                      </tr>

                      {/* FILAS EXPANDIDAS CON INSCRITOS */}
                      {expandedCourses[Number(cursoId)] && (
                        <tr>
                          <td colSpan={4}>
                            <div className="p-2 bg-gray-50 border border-gray-300 rounded-md">
                              <strong>Inscritos:</strong>
                              <ul className="list-disc pl-5 mt-2">
                                {inscripciones.map((inscripcion) => (
                                  <li key={inscripcion.id} className="py-1">
                                    üìå <strong>Documento:</strong> {inscripcion.docInscr} | 
                                    <strong> Estado:</strong> {inscripcion.est}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </td>
                        </tr>
                      )}
                    </tbody>
                  );
                })}
              </tbody>
            </table>
          ) : (
            <div className="text-center py-4 text-gray-500">No hay inscripciones registradas.</div>
          )}
        </div>
      </div>
    </div>
  );
}