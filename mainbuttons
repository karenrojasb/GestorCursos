"use client";
import { ReactNode, useState, useEffect, createContext } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import MainButtonsProps from "./components/mainbuttons";
import "./globals.css";

interface LayoutProps {
  children: ReactNode;
}

interface Usuario {
  id: string;
  nombre: string;
  publico: number; // 1 = Profesor, 2 = Finanzas
  esAdmin: boolean; // true si es administrador
}

// Contexto para compartir el usuario en toda la aplicación
export const UsuarioContext = createContext<{ usuario: Usuario | null }>({ usuario: null });

export default function RootLayout({ children }: LayoutProps) {
  const [usuario, setUsuario] = useState<Usuario | null>(null);
  const [id_emp, setIdEmp] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const usuarioGuardado = localStorage.getItem("usuario");
    if (usuarioGuardado) {
      setUsuario(JSON.parse(usuarioGuardado));
    }
  }, []);

  const iniciarSesion = async () => {
    setError("");

    if (id_emp.trim() === "") {
      setError("Ingrese su Documento.");
      return;
    }

    try {
      const response = await fetch("http://localhost:8090/api/usuario/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id_emp }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "El documento no es correcto.");
      }

      if (data.publico === null || data.publico === undefined) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      const esUsuarioValido = data.publico === 1 || data.publico === 2 || Boolean(data.esAdmin);
      if (!esUsuarioValido) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      const usuarioData: Usuario = {
        id: id_emp,
        nombre: data.nombre,
        publico: data.publico,
        esAdmin: Boolean(data.esAdmin),
      };

      setUsuario(usuarioData);
      localStorage.setItem("usuario", JSON.stringify(usuarioData));
    } catch (error: any) {
      setError(error.message);
    }
  };

  if (!usuario) {
    return (
      <html lang="es">
        <body className="flex items-center justify-center h-screen bg-gray-200">
          <div className="bg-white p-6 rounded-lg shadow-lg w-80 text-center">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Iniciar Sesión</h2>
            <input
              type="text"
              placeholder="Ingrese su ID"
              value={id_emp}
              onChange={(e) => setIdEmp(e.target.value)}
              className="border p-2 w-full mb-3 rounded"
            />
            <button
              onClick={iniciarSesion}
              className="bg-[#990000] text-white px-4 py-2 rounded w-full hover:bg-red-700 transition"
            >
              Entrar
            </button>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </div>
        </body>
      </html>
    );
  }

  return (
    <UsuarioContext.Provider value={{ usuario }}>
      <html lang="es">
        <body className="bg-gray-100 flex flex-col min-h-screen">
          <header className="w-full flex items-center justify-between px-6 py-4 bg-white shadow-md">
            <img
              src="/img/ecijg126.png"
              alt="Logo"
              className="h-20 transition-transform duration-300 ease-in-out hover:scale-110 active:scale-95"
            />
            <div className="flex flex-col items-center ml-auto">
              <span className="text-xl font-medium text-gray-700">{usuario.nombre}</span>
              <button
                className="border border-[#990000] px-3 py-2 rounded hover:bg-[#990000] hover:text-white transition"
                onClick={() => {
                  setUsuario(null);
                  localStorage.removeItem("usuario");
                }}
              >
                Cerrar Sesión
              </button>
            </div>
          </header>

          <main className="flex flex-col items-center justify-center flex-1 p-6">
            <motion.h1
              className="text-3xl font-bold text-[#990000] mb-6 text-center"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              Bienvenido a Gestión de Cursos
            </motion.h1>

            <MainButtonsProps publico={usuario.publico} esAdmin={usuario.esAdmin} onSelect={() => {}} />

            {children}
          </main>

          <footer className="bg-white text-center py-4 shadow-inner w-full">
            <div className="flex items-center justify-between px-6">
              <p className="text-gray-700">
                &copy; {new Date().getFullYear()} - Plataforma de gestión de cursos
              </p>
              <Image src="/img/osiris 2.png" alt="Logo OSIRIS" width={160} height={60} />
            </div>
          </footer>
        </body>
      </html>
    </UsuarioContext.Provider>
  );
}