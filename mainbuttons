import { Controller, Get, Post, Body, Patch, Param, Delete, Put, NotFoundException } from '@nestjs/common';
import { InscripcionesService } from './inscripciones.service';
import { CreateInscripcioneDto } from './dto/create-inscripcione.dto';
import { UpdateInscripcioneDto } from './dto/update-inscripcione.dto';

@Controller('inscripciones')
export class InscripcionesController {
  constructor(private readonly inscripcionesService: InscripcionesService) {}
  
  //  MÉTODO PARA CREAR UNA NUEVA INSCRIPCIÓN
  @Post()
  async createInscripcion(@Body() createInscripcioneDto: CreateInscripcioneDto) {
    return this.inscripcionesService.createInscripcion(createInscripcioneDto);
  }

  //  MÉTODO PARA OBTENER TODAS LAS INSCRIPCIONES (INCLUYE EL NOMBRE DEL CURSO)
  @Get()
  async getInscripciones() {
    return this.inscripcionesService.getInscripciones();
  }

  //  MÉTODO PARA ACTUALIZAR UNA INSCRIPCIÓN POR ID
  @Put(':id')
  async updateInscripcion(@Param('id') id: string, @Body() updateInscripcioneDto: UpdateInscripcioneDto) {
    const updatedInscripcion = await this.inscripcionesService.updateInscripcion(Number(id), updateInscripcioneDto);
    if (!updatedInscripcion) {
      throw new NotFoundException(`La inscripción con ID #${id} no fue encontrada`);
    }
    return updatedInscripcion;
  }

  //  MÉTODO PARA ELIMINAR UNA INSCRIPCIÓN POR ID
  @Delete(':id')
  async deleteInscripcion(@Param('id') id: string) {
    return this.inscripcionesService.deleteInscripcion(Number(id));
  }
}





import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateInscripcioneDto } from './dto/create-inscripcione.dto';
import { UpdateInscripcioneDto } from './dto/update-inscripcione.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';

@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  //  MÉTODO PARA CREAR UNA NUEVA INSCRIPCIÓN
  async createInscripcion(data: CreateInscripcioneDto) {
    console.log('Datos recibidos para crear inscripción:', data);
    const nuevaInscripcion = await this.prisma.inscripciones.create({ data });
    console.log('Inscripción creada exitosamente:', nuevaInscripcion);
    return nuevaInscripcion;
  }

  //  MÉTODO PARA OBTENER TODAS LAS INSCRIPCIONES (INCLUYE EL NOMBRE DEL CURSO)
  async getInscripciones() {
    return this.prisma.inscripciones.findMany({
      include: {
        curso: { select: { nombre_curso: true } }, // OBTIENE EL NOMBRE DEL CURSO DESDE gescur.Cursos
      },
    });
  }

  //  MÉTODO PARA ACTUALIZAR UNA INSCRIPCIÓN POR ID
  async updateInscripcion(id: number, data: UpdateInscripcioneDto) {
    console.log('ID recibido para actualizar:', id);
    console.log('Datos recibidos:', data);

    try {
      const updatedInscripcion = await this.prisma.inscripciones.update({
        where: { id },
        data,
      });
      console.log('Inscripción actualizada:', updatedInscripcion);
      return updatedInscripcion;
    } catch (error) {
      console.error('Error al actualizar inscripción:', error);
      throw new NotFoundException(`No se pudo actualizar la inscripción con ID #${id}`);
    }
  }

  //  MÉTODO PARA ELIMINAR UNA INSCRIPCIÓN POR ID
  async deleteInscripcion(id: number) {
    try {
      return await this.prisma.inscripciones.delete({ where: { id } });
    } catch (error) {
      throw new NotFoundException(`No se encontró la inscripción con ID #${id} para eliminar`);
    }
  }
}