import React, { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  idCur: number; // ID del curso al que se inscribe
  onClose: () => void;
  onSave: (data: { idCur: number; docInscr: string }) => void; // Recibe datos al inscribirse
  onInscripcionExitosa: () => void; // Función para actualizar la lista
}

export default function CursoModal({ idCur, onClose, onSave, onInscripcionExitosa }: CursoModalProps) {
  const [docInscr, setDocInscr] = useState("");
  const [cargando, setCargando] = useState(false);
  const [mensaje, setMensaje] = useState("");
  const [inscrito, setInscrito] = useState(false); // Estado para verificar si está inscrito

  // Verificar si el usuario ya está inscrito
  useEffect(() => {
    const verificarInscripcion = async () => {
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`);
        if (response.ok) {
          setInscrito(true);
        } else {
          setInscrito(false);
        }
      } catch (error) {
        console.error("Error al verificar inscripción:", error);
      }
    };

    if (docInscr) verificarInscripcion();
  }, [idCur, docInscr]);

  // Manejar cambios en el input
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDocInscr(e.target.value);
  };

  // Inscribirse al curso
  const handleInscribir = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!docInscr.trim()) {
      setMensaje("Debe ingresar un documento válido.");
      return;
    }

    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idCur, docInscr }),
      });

      if (!response.ok) throw new Error("Error al inscribir usuario.");

      setMensaje("Inscripción realizada con éxito.");
      setInscrito(true); // Marcar como inscrito
      onInscripcionExitosa(); // Actualizar lista
      onSave({ idCur, docInscr });
    } catch (error) {
      setMensaje("Hubo un problema al inscribir.");
    } finally {
      setCargando(false);
    }
  };

  // Cancelar inscripción
  const handleCancelarInscripcion = async () => {
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`, {
        method: "DELETE",
      });

      if (!response.ok) throw new Error("Error al cancelar la inscripción.");

      setMensaje("Inscripción cancelada.");
      setInscrito(false); // Marcar como no inscrito
      onInscripcionExitosa(); // Actualizar lista
    } catch (error) {
      setMensaje("Hubo un problema al cancelar la inscripción.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">
        
        {/* Botón de cerrar */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-4 text-center text-[#990000]">
          {inscrito ? "Cancelar Inscripción" : "Inscribir Usuario"}
        </h2>

        {/* Formulario */}
        <form onSubmit={handleInscribir} className="space-y-4">
          <label className="block font-semibold">Documento del usuario:</label>
          <input
            type="text"
            value={docInscr}
            onChange={handleChange}
            className="w-full p-2 border-2 border-gray-700 rounded-lg focus:outline-none focus:border-[#990000] transition"
            required
            disabled={inscrito} // Desactivar input si ya está inscrito
          />

          {/* Mensaje de error o éxito */}
          {mensaje && (
            <p className={`text-center text-sm font-semibold ${mensaje.includes("éxito") ? "text-green-600" : "text-red-600"}`}>
              {mensaje}
            </p>
          )}

          {/* Botón de inscripción o cancelación */}
          {inscrito ? (
            <button
              type="button"
              onClick={handleCancelarInscripcion}
              className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
              disabled={cargando}
            >
              {cargando ? "Cancelando..." : "Cancelar Inscripción"}
            </button>
          ) : (
            <button
              type="submit"
              className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition"
              disabled={cargando}
            >
              {cargando ? "Inscribiendo..." : "Inscribir"}
            </button>
          )}

          <button
            type="button"
            onClick={onClose}
            className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
          >
            Cerrar
          </button>
        </form>
      </div>
    </div>
  );
}