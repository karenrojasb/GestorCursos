import { Controller, Get, Post, Body, Patch, Param, Delete, Put, NotFoundException } from '@nestjs/common';
import { InscripcionesService } from './inscripciones.service';
import { CreateInscripcioneDto } from './dto/create-inscripcione.dto';
import { UpdateInscripcioneDto } from './dto/update-inscripcione.dto';

@Controller('inscripciones')
export class InscripcionesController {
  constructor(private readonly inscripcionesService: InscripcionesService) {}
  
  //  MÉTODO PARA CREAR UN NUEVO CURSO
  @Post()
  async createEnrodell (@Body() CreateInscripcioneDto:CreateInscripcioneDto){
    return this.inscripcionesService.createEnrodell(CreateInscripcioneDto);
  }
  

  //MÉTODO OBTENER UN CURSO
  @Get()
  async getEnrodell() {
    return this.inscripcionesService.getEnrodell();
  }
  

  //MÉTODO ACTUALIZAR UN CURSO POR ID
  @Put(':id')
  async updateEnrodell(@Param('id') id: string, @Body() updateInscripcioneDto: UpdateInscripcioneDto) {
    const updateEnrodell = await this.inscripcionesService.updateEnrodell(Number(id), updateInscripcioneDto)
       if (!updateEnrodell) {
         throw new NotFoundException(`The id #${id} not found`);
     }
     return updateEnrodell;
  }


  //MÉTODO PARA ELIMINAR UN CURSO POR ID
  @Delete (':id' )
  async deleteEnrodell(@Param('id') id: string){
    return this.inscripcionesService.deleteEnrodell(Number(id));
  } 
}


import { Injectable, ValidationPipe } from '@nestjs/common';
import { CreateInscripcioneDto } from './dto/create-inscripcione.dto';
import { UpdateInscripcioneDto } from './dto/update-inscripcione.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { NestFactory } from '@nestjs/core';
import { AppModule } from 'src/app.module';

@Injectable()
export class InscripcionesService {

   
   constructor(private readonly prisma: PrismaService) {}
 
  //  MÉTODO PARA CREAR UN NUEVO CURSO
 
   async createEnrodell(data: CreateInscripcioneDto) {
     //ENTRADA LOG
     console.log('Data received to create:', data);
     const nuevoInscrito = await this.prisma.inscripciones.create({ data, });
     //RESULTADO LOG
     console.log('Enrodell created successfully:', nuevoInscrito);
     return nuevoInscrito;
   }

 
 
   //MÉTODO OBTENER UN CURSO
   async getEnrodell() {
     return this.prisma.inscripciones.findMany();
   }
 
    
   //MÉTODO ACTUALIZAR UN CURSO POR ID
   async updateEnrodell (id: number, data: Prisma.InscripcionesCreateInput){
     console.log ('id received:', id);
     console.log('data received:', data);
 
     try {
       const updateEnrodell = await this.prisma.inscripciones.update({
         where: {id},
         data,
       });
       console.log ('update enrodell:', updateEnrodell);
       return updateEnrodell;
     }
     catch (error){
       console.error ('error when updating enrodell:', error);
       throw new error('the enrodell was not updated');
     }
    
   }
   
 
   //MÉTODO PARA ELIMINAR UN CURSO POR ID
   async deleteEnrodell(id: number) {
     return this.prisma.inscripciones.delete({ where: { id } });
   }
 
 
 }

function getEnrodell() {
  throw new Error('Function not implemented.');
}
 

