interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Linea: number;
  Estado: number;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  LunesIni?: string;
  LunesFin?: string;
  MartesIni?: string;
  MartesFin?: string;
  MiercolesIni?: string;
  MiercolesFin?: string;
  JuevesIni?: string;
  JuevesFin?: string;
  ViernesIni?: string;
  ViernesFin?: string;
  SabadoIni?: string;
  SabadoFin?: string;
  DomingoIni?: string;
  DomingoFin?: string;
}




<h3 className="text-lg font-semibold mt-4">Horarios</h3>
<table className="w-full border-collapse border border-gray-300 text-center">
  <thead>
    <tr className="bg-gray-200">
      <th className="border border-gray-300 px-2 py-1">DÃ­a</th>
      <th className="border border-gray-300 px-2 py-1">Hora Inicio</th>
      <th className="border border-gray-300 px-2 py-1">Hora Fin</th>
    </tr>
  </thead>
  <tbody>
    {["Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"].map((dia) => (
      <tr key={dia}>
        <td className="border border-gray-300 px-2 py-1 font-semibold">{dia}</td>
        <td className="border border-gray-300 px-2 py-1">
          <input
            type="time"
            name={`${dia}Ini`}
            value={formData[`${dia}Ini` as keyof typeof formData] || ""}
            onChange={handleChange}
            className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
          />
        </td>
        <td className="border border-gray-300 px-2 py-1">
          <input
            type="time"
            name={`${dia}Fin`}
            value={formData[`${dia}Fin` as keyof typeof formData] || ""}
            onChange={handleChange}
            className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
          />
        </td>
      </tr>
    ))}
  </tbody>
</table>





const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (!formData) return;

  try {
    const res = await fetch(`http://localhost:8090/api/cursos/${courseId}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData),
    });

    if (!res.ok) throw new Error("Error al actualizar el curso");

    alert("Curso actualizado correctamente");
    onUpdate();
    onClose();
  } catch (err) {
    setError("No se pudo actualizar el curso");
  }
};
