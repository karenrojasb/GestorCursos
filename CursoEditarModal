import { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";
import { motion } from "framer-motion";

interface CursoEditarModalProps {
  cursoEditado: Partial<Curso> | null; // Ahora permite que sea null o incompleto
  onClose: () => void;
  onSave: (data: Partial<Curso>) => void;
}

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  LunesIni: string;
  LunesFin: string;
  MartesIni: string;
  MartesFin: string;
  MiercolesIni: string;
  MiercolesFin: string;
  JuevesIni: string;
  JuevesFin: string;
  ViernesIni: string;
  ViernesFin: string;
  SabadoIni: string;
  SabadoFin: string;
  DomingoIni: string;
  DomingoFin: string;
  CupoMax: number;
  Lugar: string;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  NombreProfesor?: string;
}

interface Opcion {
  id: number;
  Especificacion: string;
  Tipo: number;
}

export default function CursoEditarModal({ onClose, onSave, cursoEditado }: CursoEditarModalProps) {
  const [curso, setCurso] = useState<Partial<Curso>>({
    NombreCurso: "",
    Valor: "",
    Publico: "",
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: "",
    CupoMax: "",
    Lugar: "",
    Modalidad: "",
    Unidad: "",
    Profesor: "",
    SegundoPro: "",
    Proexterno: "",
    Descripcion: "",
    IdTipoCurso: "",
  });

  // Cuando `cursoEditado` cambia, actualiza el estado `curso`
  useEffect(() => {
    if (cursoEditado) {
      setCurso((prevCurso) => ({
        ...prevCurso,
        ...cursoEditado,
      }));
    }
  }, [cursoEditado]);

  // Manejo de cambios en los inputs
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;

    setCurso((prev) => ({
      ...prev,
      [name]: ["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(name)
        ? value === "" ? undefined : Number(value)
        : value,
    }));
  };

  // Guardar datos al enviar
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(curso);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl opacity-100 animate-fade-in max-h-[80vh] overflow-y-auto">
        <motion.div
          className="relative bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl overflow-y-auto"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
        >
          <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90">
            <XMarkIcon className="w-6 h-6" />
          </button>

          <h2 className="text-2xl font-bold text-[#990000] text-center mb-6">Editar Curso</h2>

          <form onSubmit={handleSubmit} className="space-y-4">
            {Object.keys(curso).map((key) => (
              <div key={key} className="mb-3">
                <label className="block font-semibold text-gray-700">{key}</label>
                <input
                  type={["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(key) ? "number" : "text"}
                  name={key}
                  value={curso[key as keyof typeof curso] ?? ""}
                  onChange={handleChange}
                  className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                />
              </div>
            ))}

            <h3 className="text-lg font-semibold mt-4">Horarios</h3>
            <table className="w-full border-collapse border border-gray-300 text-center">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-300 px-2 py-1">DÃ­a</th>
                  <th className="border border-gray-300 px-2 py-1">Hora Inicio</th>
                  <th className="border border-gray-300 px-2 py-1">Hora Fin</th>
                </tr>
              </thead>
              <tbody>
                {["Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"].map((dia) => (
                  <tr key={dia}>
                    <td className="border border-gray-300 px-2 py-1 font-semibold">{dia}</td>
                    <td className="border border-gray-300 px-2 py-1">
                      <input
                        type="time"
                        name={`${dia}Ini`}
                        value={curso[`${dia}Ini` as keyof typeof curso] ?? ""}
                        onChange={handleChange}
                        className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                      />
                    </td>
                    <td className="border border-gray-300 px-2 py-1">
                      <input
                        type="time"
                        name={`${dia}Fin`}
                        value={curso[`${dia}Fin` as keyof typeof curso] ?? ""}
                        onChange={handleChange}
                        className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <button type="submit" className="mt-4 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition">
              Guardar
            </button>
          </form>
        </motion.div>
      </div>
    </div>
  );
}