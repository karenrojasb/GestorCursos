import { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";
import { motion } from "framer-motion";

interface CursoEditarModalProps {
  curso: Curso;
  onClose: () => void;
  onSave: (data: any) => void;
  cursoEditado: any;
}

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
}

interface Opcion {
  id: number;
  Especificacion: string;
  Tipo: number;
}

export default function CursoEditarModal({ onClose, onSave, cursoEditado }: CursoEditarModalProps) {
  const [curso, setCurso] = useState(
    cursoEditado || {
      NombreCurso: "",
      Valor: "",
      Publico: "",
      Periodo: "",
      Inicio: "",
      Fin: "",
      Horas: "",
      CupoMax: "",
      Lugar: "",
      Modalidad: "",
      Unidad: "",
      Profesor: "",
      SegundoPro: "",
      Proexterno: "",
      Descripcion: "",
      IdTipoCurso: "",
    }
  );

  const etiquetas = {
    NombreCurso: "Nombre Curso",
    CupoMax: "Cupo Máximo",
    SegundoPro: "Segundo Profesor",
    Proexterno: "Profesor Externo",
    IdTipoCurso: "Tipo de curso",
  };

  const [opcionesPeriodos, setOpcionesPeriodos] = useState<{ periodo: string }[]>([]);
  const [profesores, setProfesores] = useState<{ id_emp: number; nombre: string }[]>([]);
  const [unidad, setUnidad] = useState<{ codigo: number; nombre: string }[]>([]);

  useEffect(() => {
    if (cursoEditado) {
      setCurso((prevCurso) => ({
        ...prevCurso,
        ...cursoEditado,
      }));
    }
  }, [cursoEditado]);

  useEffect(() => {
    async function fetchData(url: string, setData: Function) {
      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Error al obtener los datos de ${url}`);
        const data = await response.json();
        setData(data);
      } catch (error) {
        console.error(error);
      }
    }

    fetchData("http://localhost:8090/api/cursos/periodos", setOpcionesPeriodos);
    fetchData("http://localhost:8090/api/cursos/unidad", setUnidad);
    fetchData("http://localhost:8090/api/cursos/profesores", setProfesores);
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;

    const numericFields = [
      "Valor",
      "Publico",
      "Horas",
      "CupoMax",
      "Modalidad",
      "Unidad",
      "Profesor",
      "IdTipoCurso",
    ];

    setCurso((prev) => ({
      ...prev,
      [name]: numericFields.includes(name) ? (value === "" ? "" : Number(value)) : value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const cursoData = Object.keys(curso).reduce((acc, key) => {
      const value = curso[key as keyof typeof curso];

      if (value !== "") {
        acc[key] = ["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(key)
          ? Number(value) || null
          : value;
      } else if (["SegundoPro", "Proexterno", "Descripcion"].includes(key)) {
        acc[key] = null;
      }

      return acc;
    }, {} as Record<string, any>);

    onSave(cursoData);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl opacity-100 animate-fade-in max-h-[80vh] overflow-y-auto">
        <motion.div
          className="relative bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl overflow-y-auto"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
        >
          <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]">
            <XMarkIcon className="w-6 h-6" />
          </button>

          <h2 className="text-2xl font-bold text-[#990000] text-center mb-6">Editar Curso</h2>

          <form onSubmit={handleSubmit} className="space-y-4">
            {Object.keys(curso)
              .filter((key) => !["Inicio", "Fin"].includes(key))
              .map((key) => (
                <div key={key} className="mb-3">
                  <label className="block font-semibold text-gray-700">
                    {etiquetas[key as keyof typeof etiquetas] || key}
                  </label>

                  <input
                    type={
                      ["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(
                        key
                      )
                        ? "number"
                        : "text"
                    }
                    name={key}
                    value={curso[key as keyof typeof curso] || ""}
                    onChange={handleChange}
                    className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                  />
                </div>
              ))}

            <h3 className="text-lg font-semibold mt-4">Horarios</h3>
            <table className="w-full border-collapse border border-gray-300 text-center">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-300 px-2 py-1">Día</th>
                  <th className="border border-gray-300 px-2 py-1">Hora Inicio</th>
                  <th className="border border-gray-300 px-2 py-1">Hora Fin</th>
                </tr>
              </thead>
              <tbody>
                {["Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"].map((dia) => (
                  <tr key={dia}>
                    <td className="border border-gray-300 px-2 py-1 font-semibold">{dia}</td>
                    <td className="border border-gray-300 px-2 py-1">
                      <input
                        type="time"
                        name={`${dia}Ini`}
                        value={curso[`${dia}Ini` as keyof typeof curso] || ""}
                        onChange={handleChange}
                        className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                      />
                    </td>
                    <td className="border border-gray-300 px-2 py-1">
                      <input
                        type="time"
                        name={`${dia}Fin`}
                        value={curso[`${dia}Fin` as keyof typeof curso] || ""}
                        onChange={handleChange}
                        className="w-full border p-1 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <button type="submit" className="mt-4 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition">
              Guardar
            </button>
          </form>
        </motion.div>
      </div>
    </div>
  );
}