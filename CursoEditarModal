import { useEffect, useState } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Linea: number;
  Estado: number;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  
  
}

interface CursoEditarModalProps {
  courseId: number | null;
  isOpen: boolean;
  onClose: () => void;
  onUpdate: () => void;
}

interface Opcion {
  id: number;
  Especificacion: string;
  Tipo: number;
}

export default function CursoEditarModal({
  courseId,
  isOpen,
  onClose,
  onUpdate,
}: CursoEditarModalProps) {
  const [formData, setFormData] = useState<Curso>({
    id: 0,
    NombreCurso: "",
    Valor: 0,
    Publico: 0,
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: 0,
    CupoMax: 0,
    Lugar: "",
    Linea:0,
    Estado: 0,
    Modalidad:0,
    Unidad: 0,
    Profesor: 0,
    SegundoPro:"",
    Proexterno: "",
    Descripcion: "",
    IdTipoCurso:0,
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [opcionesPublico, setOpcionesPublico] = useState<Opcion[]>([]);
  const [opcionesLinea, setOpcionesLinea] = useState<Opcion[]>([]);
  const [opcionesModalidad, setOpcionesModalidad] = useState<Opcion[]>([]);
  const [opcionesEstado, setOpcionesEstado] = useState<Opcion[]>([]);
  const [opcionesTipoCurso, setOpcionesTipoCurso] = useState<Opcion[]>([]);
  const [unidad, setUnidad] = useState<{ codigo: number; nombre: string}[]>([])
  const [opcionesPeriodos, setOpcionesPeriodos] = useState<{ periodo: string}[]>([]);
  const [profesores, setProfesores] = useState<{ id_emp: number; nombre: string}[]>([]);
  const [editandoProfesor, setEditandoProfesor]= useState(false);

  // Cargar datos del curso
  useEffect(() => {
    if (!courseId || !isOpen) return; // No ejecutar si no hay ID o el modal está cerrado

    setLoading(true);
    setError(null);

    console.log("Cargando curso con ID:", courseId);

    fetch(`http://localhost:8090/api/cursos/${courseId}`)
      .then((res) => {
        if (!res.ok) {
          throw new Error("Error al cargar el curso");
        }
        return res.json();
      })
      .then((data) => {
        console.log("Datos del curso recibidos:", data);
        if (data) {
          setFormData(data); // Actualiza formData con los datos del curso
        } else {
          throw new Error("Datos del curso vacíos");
        }
      })
      .catch((err) => {
        setError(err.message || "No se pudo cargar el curso");
      })
      .finally(() => {
        setLoading(false);
      });
  }, [courseId, isOpen]);


    useEffect(() => {
      async function fetchOpciones() {
        try {
          const response = await fetch("http://localhost:8090/api/cursos/especificaciones");
          if (!response.ok) throw new Error("Error al obtener las opciones");
  
          const data: Opcion[] = await response.json();
  
          setOpcionesPublico(data.filter((item) => item.Tipo === 1));
          setOpcionesLinea(data.filter((item) => item.Tipo === 2));
          setOpcionesModalidad(data.filter((item) => item.Tipo === 3));
          setOpcionesEstado(data.filter((item) => item.Tipo === 4));
          setOpcionesTipoCurso(data.filter((item) => item.Tipo === 8));
        } catch (error) {
          console.error("Error cargando las opciones:", error);
        }
      }
  
      fetchOpciones();
    }, []);

    useEffect(()  => {
      async function fetcPeriodos() {
        try {
          const response = await fetch("http://localhost:8090/api/cursos/periodos")
          if (!response.ok) throw new Error("Error al obtener los periodos");
  
          const data = await response.json();
          setOpcionesPeriodos(data);
          } catch(error){
            console.error("Error cargando lista de periodos:", error);
          }
        }
        fetcPeriodos(); 
    }, []);
  
  
    useEffect(()  => {
      async function fetcUnidades() {
        try {
          const response = await fetch("http://localhost:8090/api/cursos/unidad")
          if (!response.ok) throw new Error("Error al obtener las unidades");
  
          const data = await response.json();
          setUnidad(data);
          } catch(error){
            console.error("Error cargando lista de unidades:", error);
          }
        }
        fetcUnidades(); 
    }, []);

    useEffect(()  => {
      async function fetcProfesores() {
        try {
          const response = await fetch("http://localhost:8090/api/cursos/profesores");
          if (!response.ok) throw new Error("Error al obtener los profesores");
    
          const data = await response.json();
          console.log("Lista de profesores obtenida:", data); // <-- Verifica los datos aquí
          setProfesores(data);
        } catch(error){
          console.error("Error cargando los profesores:", error);
        }
      }
      fetcProfesores(); 
    }, []);
  


  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData((prev) =>
      prev
        ? {
            ...prev,
            [e.target.name]: e.target.type === "number" ? Number(e.target.value) : e.target.value,
          }
        : prev
    );
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData) return;

    try {
      const res = await fetch(`http://localhost:8090/api/cursos/${courseId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (!res.ok) throw new Error("Error al actualizar el curso");

      alert("Curso actualizado correctamente");
      onUpdate();
      onClose();
    } catch (err) {
      setError("No se pudo actualizar el curso");
    }
  };

  if (!isOpen) return null; // No renderizar si el modal está cerrado
  if (loading) return <p>Cargando...</p>;
  if (error) return <p>{error}</p>;
  if (!formData) return <p>No se encontró el curso</p>;

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="modal relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl opacity-100 animate-fade-in max-h-[80vh] overflow-y-auto">
      <button 
          onClick={onClose} 
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
        >
          <XMarkIcon className="w-6 h-6" />
        </button>
        <h2>Editar Curso</h2>
        {/* FORMULARIO DE EDITAR CURSO */}
        <form onSubmit={handleSubmit}>
         
          <label>
            Nombre:
            <input
  type="text"
  name="NombreCurso"
  value={formData.NombreCurso || ""}
  onChange={handleChange}
  required
/>
          </label>

          <label>
            Valor:
            <input
  type="number"
  name="Valor"
  value={formData.Valor ?? 0}
  onChange={handleChange}
  required
/>
          </label>

          <label>
  Público:
  <select
    name="Publico"
    value={formData.Publico}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Publico: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesPublico.map((opcion) => (
      <option key={opcion.id} value={opcion.id}>
        {opcion.Especificacion}
      </option>
    ))}
  </select>
</label>

<label>
  Periodo:
  <select
    name="Periodo"
    value={formData.Periodo}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Periodo: String(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesPeriodos.map((opcion, index) => (
      <option key={index} value={opcion.periodo}>
        {opcion.periodo}
      </option>
    ))}
  </select>
</label>

          <label>
            Fecha de incio:
            <input
  type="text"
  name="Inicio"
  value={formData.Inicio || ""}
  onChange={handleChange}
  required
/>
          </label>

          <label>
            Fecha fin:
            <input
  type="text"
  name="Fin"
  value={formData.Fin || ""}
  onChange={handleChange}
  required
/>
          </label>

          <label>
            Horas:
            <input
  type="number"
  name="Horas"
  value={formData.Horas ?? 0}
  onChange={handleChange}
  required
/>
          </label>

          <label>
            Cupo Máximo:
            <input
  type="number"
  name="CupoMax"
  value={formData.CupoMax ?? 0}
  onChange={handleChange}
  required
/>
          </label>

          <label>
            Lugar:
            <input
  type="text"
  name="Lugar"
  value={formData.Lugar || ""}
  onChange={handleChange}
  required
/>
          </label>

          <label>
  Línea
  <select
    name="Linea"
    value={formData.Linea}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Linea: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesLinea.map((opcion) => (
      <option key={opcion.id} value={opcion.id}>
        {opcion.Especificacion}
      </option>
    ))}
  </select>
</label>

           <label>
  Estado:
  <select
    name="Estado"
    value={formData.Estado}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Estado: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesEstado.map((opcion) => (
      <option key={opcion.id} value={opcion.id}>
        {opcion.Especificacion}
      </option>
    ))}
  </select>
</label>

           <label>
  Modalidad:
  <select
    name="Modalida"
    value={formData.Modalidad}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Modalidad: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesModalidad.map((opcion) => (
      <option key={opcion.id} value={opcion.id}>
        {opcion.Especificacion}
      </option>
    ))}
  </select>
</label>

<label>
  Unidad:
  <select
    name="Unidad"
    value={formData.Unidad}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        Unidad: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {unidad.map((unidad) => (
                    <option key={unidad.codigo} value={unidad.codigo}>
                      {unidad.nombre}
                    </option>
                  ))}
  </select>
</label>   
          



<label>
           Profesor:
            <input
  type="number"
  name="Profesor"
  value={formData.Profesor ?? 0}
  onChange={handleChange}
  required
/>
          </label>



           
          <label>
            Segundo Profesor:
            <input
  type="number"
  name="SegundoPro"
  value={formData.SegundoPro ?? 0}
  onChange={handleChange}
  required
/>
          </label> 

          <label>
            Profesor Externo:
            <input
  type="text"
  name="Proexterno"
  value={formData.Proexterno ?? 0}
  onChange={handleChange}
  required
/>
          </label>   

          <label>
  Tipo de Curso:
  <select
    name="IdTipoCurso"
    value={formData.IdTipoCurso}
    onChange={(e) =>
      setFormData((prev) => ({
        ...prev,
        IdTipoCurso: Number(e.target.value), 
      }))
    }
    required
  >
    <option value="">Seleccione una opción</option>
    {opcionesTipoCurso.map((opcion) => (
      <option key={opcion.id} value={opcion.id}>
        {opcion.Especificacion}
      </option>
    ))}
  </select>
</label>

          <label>
            Descripción:
            <input
  type="text"
  name="Descripcion"
  value={formData.Descripcion ?? 0}
  onChange={handleChange}
  required
/>
          </label>  

          <div className="modal-actions">
            <button type="submit">Actualizar</button>
            <button type="button" onClick={onClose}>
              Cancelar
            </button>
          </div>
        </form>
      </div>

      <style jsx>{`
        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
        }

        .modal {
          background: white;
          padding: 20px;
          border-radius: 10px;
          width: 400px;
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        .modal h2 {
          margin-bottom: 15px;
          text-align: center;
        }

        .modal label {
          display: block;
          margin-bottom: 10px;
          font-weight: bold;
        }

        .modal input,
        .modal select {
          width: 100%;
          padding: 8px;
          margin-top: 5px;
          border: 1px solid #ccc;
          border-radius: 5px;
        }

        .modal-actions {
          margin-top: 15px;
          display: flex;
          justify-content: space-between;
        }

        .modal-actions button {
          padding: 10px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-size: 16px;
        }

        .modal-actions button[type="submit"] {
          background-color: #28a745;
          color: white;
        }

        .modal-actions button[type="button"] {
          background-color: #dc3545;
          color: white;
        }

        .modal-actions button:hover {
          opacity: 0.8;
        }
      `}</style>
    </div>
  );
}
