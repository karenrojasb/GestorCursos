import { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";
import { motion } from "framer-motion";

interface CursoEditarModalProps {
  cursoEditado: any;
  onClose: () => void;
  onSave: (data: any) => void;
}

export default function CursoEditarModal({ onClose, onSave, cursoEditado }: CursoEditarModalProps) {
  const [curso, setCurso] = useState(
    cursoEditado || {
      NombreCurso: "",
      Valor: "",
      Publico: "",
      Periodo: "",
      Inicio: "",
      Fin: "",
      Horas: "",
      CupoMax: "",
      Lugar: "",
      Modalidad: "",
      Unidad: "",
      Profesor: "",
      SegundoPro: "",
      Proexterno: "",
      Descripcion: "",
      IdTipoCurso: "",
    }
  );

  const etiquetas = {
    NombreCurso: "Nombre Curso",
    CupoMax: "Cupo MÃ¡ximo",
    SegundoPro: "Segundo Profesor",
    Proexterno: "Profesor Externo",
    IdTipoCurso: "Tipo de curso",
  };

  useEffect(() => {
    if (cursoEditado) {
      setCurso(cursoEditado);
    }
  }, [cursoEditado]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    const numericFields = ["Valor", "Publico", "Horas", "CupoMax", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"];

    setCurso((cursoAnterior) => ({
      ...cursoAnterior,
      [name]: numericFields.includes(name) ? (value === "" ? "" : Number(value)) : value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const cursoData = Object.keys(curso).reduce((acc, key) => {
      const value = curso[key as keyof typeof curso];

      acc[key] = ["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(key)
        ? Number(value) || null
        : value || null;

      return acc;
    }, {} as Record<string, any>);

    onSave(cursoData);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto">
        <motion.div
          className="relative bg-white p-8 rounded-lg shadow-lg w-full max-w-2xl overflow-y-auto"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
        >
          <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]">
            <XMarkIcon className="w-6 h-6" />
          </button>

          <h2 className="text-2xl font-bold text-[#990000] text-center mb-6">Editar Curso</h2>

          <form onSubmit={handleSubmit} className="space-y-4">
            {Object.keys(curso)
              .filter((key) => !["Inicio", "Fin"].includes(key))
              .map((key) => (
                <div key={key} className="mb-3">
                  <label className="block font-semibold text-gray-700">
                    {etiquetas[key as keyof typeof etiquetas] || key}
                  </label>

                  <input
                    type={["Valor", "Horas", "CupoMax", "Publico", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"].includes(key) ? "number" : "text"}
                    name={key}
                    value={curso[key as keyof typeof curso] || ""}
                    onChange={handleChange}
                    className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000] outline-none"
                  />
                </div>
              ))}

            <button type="submit" className="mt-4 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition">
              Guardar
            </button>
          </form>
        </motion.div>
      </div>
    </div>
  );
}