
import { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Linea: number;
  Estado: number;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  LunesIni: string;
  LunesFin: string;
  MartesIni: string;
  MartesFin: string;
  MiercolesIni: string;
  MiercolesFin: string;
  JuevesIni: string;
  JuevesFin: string;
  ViernesIni: string;
  ViernesFin: string;
  SabadoIni: string;
  SabadoFin: string;
  DomingoIni: string;
  DomingoFin: string;
}

interface Opcion {
  id: number;
  Especificacion: string;
  Tipo: number;
}

interface CursoEditarModalProps {
  curso: Curso;
  onClose: () => void;
  onSave: (curso: Curso) => void;
}

export default function CursoEditarModal({ curso, onClose, onSave }: CursoEditarModalProps) {
  const [editandoCurso, setEditandoCurso] = useState<Curso>({ ...curso });
  const [mensajeExito, setMensajeExito] = useState("");
  const [opcionesPublico, setOpcionesPublico] = useState<Opcion[]>([]);
  const [opcionesLinea, setOpcionesLinea] = useState<Opcion[]>([]);
  const [opcionesModalidad, setOpcionesModalidad] = useState<Opcion[]>([]);
  const [opcionesEstado, setOpcionesEstado] = useState<Opcion[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    async function fetchOpciones() {
      try {
        const response = await fetch("http://localhost:8090/api/cursos/especificaciones");
        if (!response.ok) throw new Error("Error al obtener las opciones");

        const data: Opcion[] = await response.json();

        setOpcionesPublico(data.filter((item) => item.Tipo === 1));
        setOpcionesLinea(data.filter((item) => item.Tipo === 2));
        setOpcionesModalidad(data.filter((item) => item.Tipo === 3));
        setOpcionesEstado(data.filter((item) => item.Tipo === 4));
      } catch (error) {
        console.error("Error cargando las opciones:", error);
      }
    }

    fetchOpciones();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    const camposNumericos = ["Valor", "Publico", "Horas", "Linea", "Estado", "Modalidad", "Unidad", "Profesor", "IdTipoCurso"];

    setEditandoCurso((prev) => ({
      ...prev,
      [name]: camposNumericos.includes(name) ? parseInt(value) || 0 : value || "", // Si value es null o undefined, usa ""
    }));
  };

  const handleGuardarEdicion = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${editandoCurso.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editandoCurso),
      });

      if (!response.ok) {
        console.error("Error HTTP al actualizar:", response.status);
        const errorText = await response.text();
        console.error("Respuesta del servidor:", errorText);
        return;
      }

      setMensajeExito("¡Curso actualizado con éxito!");
      onSave({ ...editandoCurso });
      setTimeout(() => {
        setMensajeExito("");
        onClose();
      }, 3000);
    } catch (error) {
      console.error("Error al guardar la edición:", error);
    }
    setIsLoading(false);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg max-h-[80vh] overflow-y-auto w-full max-w-md">
        <button className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90" onClick={onClose}>
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-lg text-[#990000] font-bold mb-4">Editar Curso</h2>
        {mensajeExito && (
          <div className="fixed top-10 left-1/2 transform -translate-x-1/2 bg-[#990000] text-white p-2 rounded text-center mb-4">
            {mensajeExito}
          </div>
        )}

        <form>
          {Object.keys(editandoCurso).map((key) =>
            key !== "id" ? (
              <div key={key} className="mt-2">
                <label className="block text-sm font-bold">{key}</label>

                {key === "Publico" ? (
                  <select name="Publico" value={editandoCurso.Publico} onChange={handleChange} className="border p-2 w-full rounded">
                    {opcionesPublico.map((opcion) => (
                      <option key={opcion.id} value={opcion.id}>
                        {opcion.Especificacion}
                      </option>
                    ))}
                  </select>
                ) : key === "Linea" ? (
                  <select name="Linea" value={editandoCurso.Linea} onChange={handleChange} className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000]">
                    {opcionesLinea.map((opcion) => (
                      <option key={opcion.id} value={opcion.id}>
                        {opcion.Especificacion}
                      </option>
                    ))}
                  </select>
                ) : key === "Modalidad" ? (
                  <select name="Modalidad" value={editandoCurso.Modalidad} onChange={handleChange} className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000]">
                    {opcionesModalidad.map((opcion) => (
                      <option key={opcion.id} value={opcion.id}>
                        {opcion.Especificacion}
                      </option>
                    ))}
                  </select>
                ) : key === "Estado" ? (
                  <select name="Estado" value={editandoCurso.Estado} onChange={handleChange} className="w-full border p-2 rounded-lg focus:ring-2 focus:ring-[#990000]">
                    {opcionesEstado.map((opcion) => (
                      <option key={opcion.id} value={opcion.id}>
                        {opcion.Especificacion}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name={key}
                    value={editandoCurso[key as keyof Curso] || ""} // Si es null o undefined, usa ""
                    onChange={handleChange}
                    className="border p-2 w-full rounded"
                  />
                )}
              </div>
            ) : null
          )}

          <div className="mt-4 flex justify-end space-x-4">
            <button type="button" className="px-4 py-2 bg-gray-500 text-white rounded" onClick={onClose}>
              Cancelar
            </button>
            <button type="button" className="px-4 py-2 bg-[#990000] text-white rounded" onClick={handleGuardarEdicion} disabled={isLoading}>
              {isLoading ? "Guardando..." : "Guardar cambios"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
