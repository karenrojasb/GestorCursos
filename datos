// OBTENER NOMBRE DEL PROFESOR POR ID
async obtenerNombreProfesor(id_emp: string): Promise<string | null> {
  try {
    const resultado = await this.prisma.$queryRaw<{ nombre: string }[]>`
      SELECT nombre FROM gescur.emp_nomina WHERE id_emp = CAST(${id_emp} AS VARCHAR)
    `;

    if (resultado.length > 0) {
      return resultado[0].nombre;
    } else {
      return null;
    }
  } catch (error) {
    console.error('Error al obtener el nombre del profesor:', error);
    throw new Error('No se pudo obtener el nombre del profesor');
  }
}




// OBTENER NOMBRE DEL PROFESOR POR ID
@Get('nombre-profesor/:id_emp')
async obtenerNombreProfesor(@Param('id_emp') id_emp: string) {
  const nombre = await this.cursosService.obtenerNombreProfesor(id_emp);
  if (!nombre) {
    throw new NotFoundException(`No se encontr√≥ un profesor con id_emp ${id_emp}`);
  }
  return { nombre };
}
