import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateCursoDto } from './dto/create-curso.dto';

@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}


  async getCourses() {
    return this.prisma.$queryRaw`
    SELECT 
    c.id,
    c.NombreCurso,
    c.Valor,
    l.Especificacion AS Publico,
    c.Periodo,
    c.Inicio,
    c.Fin,
    c.Horas,
    c.CupoMax,
    c.Lugar,                          
    c.LunesIni,                          
    c.LunesFin,                         
    c.MartesIni,                       
    c.MartesFin,                        
    c.MiercolesIni,                      
    c.MiercolesFin,                      
    c.JuevesIni,                         
    c.JuevesFin,                         
    c.ViernesIni,                        
    c.ViernesFin,                        
    c.SabadoIni,                         
    c.SabadoFin,                         
    c.DomingoIni,                        
    c.DomingoFin,                        
    c.Linea,                             
    c.Estado,                            
    c.Modalidad,                         
    c.Unidad,                            
    c.Profesor,                          
    c.SegundoPro,                        
    c.Proexterno,                       
    c.Descripcion,                       
    c.IdTipoCurso,
    e.nombre AS NombreProfesor
    FROM gescur.cursos c
    LEFT JOIN gescur.listas l ON l.id = Publico AND l.Tipo = 1
    LEFT JOIN gescur.emp_nomina e ON c.Profesor = e.id_emp
    ;                       

    `
  }

  // CREAR CURSO
  async createCourses(data: CreateCursoDto) {
    console.log("Data recibida:", data);
    try {
      return await this.prisma.cursos.create({ data });
    } catch (error) {
      console.error("Error al crear el curso en el backend", error);
      throw new Error("Error al crear el curso");
    }
  }


  // OBTENER OPCIONES PARA EL DESPLEGABLE
  async getEspecificaciones() {
    try {
      return await this.prisma.listas.findMany(); // Asegúrate de que 'listas' es la tabla correcta
    } catch (error) {
      console.error("Error al obtener las especificaciones:", error);
      throw new Error("Error al obtener las especificaciones");
    }
  }

  // OBTENER CURSO POR ID
  async getCourseId(id: number) {
    return this.prisma.cursos.findUnique({ where: { id } });
  }

  // ACTUALIZAR CURSO POR ID
  async updateCourse(id: number, data: Prisma.CursosUpdateInput) {
    console.log('ID recibido:', id);
    console.log('Datos recibidos:', data);
    try {
      return await this.prisma.cursos.update({
        where: { id },
        data,
      });
    } catch (error) {
      console.error('Error al actualizar el curso:', error);
      throw new Error('El curso no se pudo actualizar');
    }
  }

  // ELIMINAR CURSO POR ID
  async deleteCourse(id: number) {
    return this.prisma.cursos.delete({ where: { id } });
  }


  async obtenerCursosParaUsuario(id_emp: string) {
    try {
        // Obtener el valor de 'publico' del usuario
        const usuario = await this.prisma.$queryRaw<{ publico: number }[]>`
            SELECT publico FROM gescur.emp_nomina WHERE id_emp = ${id_emp}
        `;

        if (!usuario || usuario.length === 0) {
            throw new Error('Usuario no encontrado en gescur.emp_nomina');
        }

        const publico = usuario[0].publico;

        console.log(`Usuario ${id_emp} tiene publico: ${publico}`);

        // Obtener cursos según el público
        let cursos;
        if (publico === 3) {
            // Si es '3', debe ver todos los cursos (incluyendo público 1 y 2)
            cursos = await this.prisma.$queryRaw`
                SELECT * FROM gescur.Cursos 
                ORDER BY id
            `;
        } else {
            // Si es '1' o '2', debe ver los cursos de su público y los de público 3 (abiertos para todos)
            cursos = await this.prisma.$queryRaw`
                SELECT * FROM gescur.Cursos 
                WHERE publico = ${publico} OR publico = 3
                ORDER BY id
            `;
        }

        console.log(`Cursos obtenidos para usuario ${id_emp}:`, cursos);

        return cursos;
    } catch (error) {
        console.error('Error al obtener cursos:', error.message);
        throw new Error('No se pudieron obtener los cursos.');
    }
}

async obtenerProfesores(){
  const query = `SELECT id_emp, nombre FROM gescur.emp_nomina WHERE publico = 1`;
  const profesores = await this.prisma.$queryRawUnsafe(query);
  return profesores;
}

async obtenerUnidad () {
  return this.prisma.$queryRaw<
  Array<{ codigo: number; nombre: string}>
  >(Prisma.sql`
    SELECT codigo, nombre FROM gescur.unidad`);
}

async obtenerPeriodos(){
  return this.prisma.$queryRaw<
  {  periodo: string; fecha_ini: Date; fecha_fin: Date}[]
  >`
  SELECT  periodo, fecha_ini, fecha_fin
  FROM gescur.periodos
  WHERE YEAR(fecha_ini) = YEAR(GETDATE())
  ORDER BY fecha_ini ASC
  `;
}




}
