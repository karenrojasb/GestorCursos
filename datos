import React, { useState } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  onSave: (data: any) => void;
  onClose: () => void;
}

export default function CursoModal({ onClose, onSave }: CursoModalProps) {
  const [curso, setCurso] = useState({
    NombreCurso: "",
    Valor: "",
    Publico: "",
    Periodo: "",
    Inicio: "",
    Fin: "",
    Horas: "",
    CupoMax: "",
    Lugar: "",
    LunesIni: "",
    LunesFin: "",
    MartesIni: "",
    MartesFin: "",
    MiercolesIni: "",
    MiercolesFin: "",
    JuevesIni: "",
    JuevesFin: "",
    ViernesIni: "",
    ViernesFin: "",
    SabadoIni: "",
    SabadoFin: "",
    DomingoIni: "",
    DomingoFin: "",
    Linea: "",
    Estado: "",
    Modalidad: "",
    Unidad: "",
    Profesor: "",
    SegundoPro: "",
    Proexterno: "",
    Descripcion: "",
    IdTipoCurso: "",
  });

  // Manejar cambios en los inputs
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCurso({ ...curso, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    onSave({
      NombreCurso: curso.NombreCurso,
      Valor: curso.Valor ? Number(curso.Valor) : null,
      Publico: curso.Publico ? Number(curso.Publico) : null,
      Periodo: curso.Periodo,
      Inicio: curso.Inicio,
      Fin: curso.Fin,
      Horas: curso.Horas ? Number(curso.Horas) : null,
      CupoMax: curso.CupoMax ? Number(curso.CupoMax) : null,
      Lugar: curso.Lugar,
      LunesIni: curso.LunesIni || "",
      LunesFin: curso.LunesFin || "",
      MartesIni: curso.MartesIni || "",
      MartesFin: curso.MartesFin || "",
      MiercolesIni: curso.MiercolesIni || "",
      MiercolesFin: curso.MiercolesFin || "",
      JuevesIni: curso.JuevesIni || "",
      JuevesFin: curso.JuevesFin || "",
      ViernesIni: curso.ViernesIni || "",
      ViernesFin: curso.ViernesFin || "",
      SabadoIni: curso.SabadoIni || "",
      SabadoFin: curso.SabadoFin || "",
      DomingoIni: curso.DomingoIni || "",
      DomingoFin: curso.DomingoFin || "",
      Linea: curso.Linea ? Number(curso.Linea) : null,
      Estado: curso.Estado ? Number(curso.Estado) : null,
      Modalidad: curso.Modalidad ? Number(curso.Modalidad) : null,
      Unidad: curso.Unidad ? Number(curso.Unidad) : null,
      Profesor: curso.Profesor ? Number(curso.Profesor) : null,
      SegundoPro: curso.SegundoPro || "",
      Proexterno: curso.Proexterno || "",
      Descripcion: curso.Descripcion || "",
      IdTipoCurso: curso.IdTipoCurso ? Number(curso.IdTipoCurso) : null,
    });
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-3xl flex flex-col max-h-[80vh] overflow-y-auto">
        {/* Botón de cerrar */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-6 text-center text-[#990000]">
          Crear Curso
        </h2>

        {/* Formulario */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <label className="block text-gray-700 font-medium">
            Nombre del curso:
          </label>
          <input
            type="text"
            name="NombreCurso"
            value={curso.NombreCurso}
            onChange={handleChange}
            className="w-full p-2 border-2 border-gray-700 rounded-lg focus:outline-none focus:border-[#990000] transitions"
            required
          />

          {/* Campos adicionales de horarios */}
          <label className="block font-semibold">Horario (Opcional):</label>
          {["Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo"].map((dia) => (
            <div key={dia} className="grid grid-cols-2 gap-2">
              <label>{dia} Inicio:</label>
              <input
                type="time"
                name={`${dia}Ini`}
                value={curso[`${dia}Ini` as keyof typeof curso]}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              />
              <label>{dia} Fin:</label>
              <input
                type="time"
                name={`${dia}Fin`}
                value={curso[`${dia}Fin` as keyof typeof curso]}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              />
            </div>
          ))}

          <label className="block font-semibold">Valor:</label>
          <input
            type="number"
            name="Valor"
            value={curso.Valor}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          <label className="block font-semibold">Público:</label>
          <input
            type="number"
            name="Publico"
            value={curso.Publico}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          <label className="block font-semibold">Periodo:</label>
          <input
            type="text"
            name="Periodo"
            value={curso.Periodo}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          <label className="block font-semibold">Inicio:</label>
          <input
            type="date"
            name="Inicio"
            value={curso.Inicio}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          <label className="block font-semibold">Fin:</label>
          <input
            type="date"
            name="Fin"
            value={curso.Fin}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          <label className="block font-semibold">Horas:</label>
          <input
            type="number"
            name="Horas"
            value={curso.Horas}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />

          {/* Botón para guardar */}
          <button
            type="submit"
            className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition"
          >
            Guardar
          </button>

          <button
            onClick={onClose}
            className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
          >
            Cancelar
          </button>
        </form>
      </div>
    </div>
  );
}