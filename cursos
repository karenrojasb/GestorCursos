import { Controller, Get, Post, Put, Delete, Param, Body, NotFoundException } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}

  // CREAR CURSO
  @Post()
  async createCourses(@Body() data: CreateCursoDto) {
    console.log("Recibiendo datos:", data);
    return this.cursosService.createCourses(data);
  }

  // OBTENER TODOS LOS CURSOS (FILTRANDO SOLO A LOS PROFESORES)
  @Get()
  async getCourses() {
    return this.cursosService.getCourses();
  }

  // OBTENER OPCIONES PARA EL DESPLEGABLE
  @Get('especificaciones')
  async getEspecificaciones() {
    return this.cursosService.getEspecificaciones();
  }

  // OBTENER CURSO POR ID
  @Get(':id')
  async getCourseById(@Param('id') id: string) {
    const curso = await this.cursosService.getCourseById(Number(id));
    if (!curso) {
      throw new NotFoundException(`El curso con id #${id} no fue encontrado`);
    }
    return curso;
  }

  // ACTUALIZAR CURSO POR ID
  @Put(':id')
  async updateCourse(@Param('id') id: string, @Body() updateCursoDto: UpdateCursoDto) {
    const updateCourse = await this.cursosService.updateCourse(Number(id), updateCursoDto);
    if (!updateCourse) {
      throw new NotFoundException(`El curso con id #${id} no fue encontrado`);
    }
    return updateCourse;
  }

  // ELIMINAR CURSO POR ID
  @Delete(':id')
  async deleteCourse(@Param('id') id: string) {
    return this.cursosService.deleteCourse(Number(id));
  }
}





import { Injectable, BadRequestException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}

  // CREAR CURSO
  async createCourses(data: CreateCursoDto) {
    console.log("Data recibida:", data);
    try {
      return await this.prisma.cursos.create({ data });
    } catch (error) {
      console.error("Error al crear el curso en el backend", error);
      throw new BadRequestException("Error al crear el curso");
    }
  }

  // OBTENER TODOS LOS CURSOS (FILTRANDO SOLO PROFESORES)
  async getCourses() {
    try {
      return await this.prisma.$queryRaw`
        SELECT 
          c.id AS Id, 
          c.nombre_curso AS NombreCurso, 
          c.valor AS Valor, 
          c.publico AS Publico, 
          c.periodo AS Periodo, 
          c.inicio AS Inicio, 
          c.fin AS Fin, 
          c.horas AS Horas, 
          c.cupo_max AS CupoMax,
          c.lugar AS Lugar, 
          c.estado AS Estado, 
          c.modalidad AS Modalidad, 
          c.unidad AS Unidad, 
          c.profesor AS Profesor, 
          e.nombre AS NombreProfesor  -- Se obtiene el nombre solo si es profesor
        FROM gescur.Cursos c
        LEFT JOIN gescur.emp_nomina e ON c.profesor = e.id_emp
        WHERE e.publico = 2; -- Solo profesores
      `;
    } catch (error) {
      console.error("Error al obtener cursos:", error);
      throw new BadRequestException("Error al obtener cursos");
    }
  }

  // OBTENER OPCIONES PARA EL DESPLEGABLE
  async getEspecificaciones() {
    try {
      return await this.prisma.listas.findMany(); // Aseg√∫rate de que 'listas' es la tabla correcta
    } catch (error) {
      console.error("Error al obtener las especificaciones:", error);
      throw new BadRequestException("Error al obtener las especificaciones");
    }
  }

  // OBTENER CURSO POR ID
  async getCourseById(id: number) {
    try {
      return await this.prisma.cursos.findUnique({ where: { id } });
    } catch (error) {
      console.error("Error al obtener el curso:", error);
      throw new BadRequestException("Error al obtener el curso");
    }
  }

  // ACTUALIZAR CURSO POR ID
  async updateCourse(id: number, data: UpdateCursoDto) {
    try {
      return await this.prisma.cursos.update({
        where: { id },
        data,
      });
    } catch (error) {
      console.error("Error al actualizar el curso:", error);
      throw new BadRequestException("El curso no se pudo actualizar");
    }
  }

  // ELIMINAR CURSO POR ID
  async deleteCourse(id: number) {
    try {
      return await this.prisma.cursos.delete({ where: { id } });
    } catch (error) {
      console.error("Error al eliminar el curso:", error);
      throw new BadRequestException("El curso no se pudo eliminar");
    }
  }
}