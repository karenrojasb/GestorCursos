import { Body, Controller, Delete, Get, NotFoundException, Param, ParseIntPipe, Post, Put, Query } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}

  // CREAR CURSO
  @Post()
  async createCourses(@Body() data: CreateCursoDto) {
    console.log("Recibiendo datos:", data);
    return this.cursosService.createCourses(data);
  }

  // OBTENER TODOS LOS CURSOS
  @Get() 
  async getCourses() {
    return this.cursosService.getCourses();
  }

  // OBTENER ESPECIFICACIONES PARA EL DESPLEGABLE
  @Get('especificaciones')
  async getEspecificaciones() {
    return this.cursosService.getEspecificaciones();
  }

 
    // OBTENER TODOS LOS CURSOS POR ID
 


  // ACTUALIZAR CURSO POR ID
  @Put(':id')
  async updateCourse(@Param('id') id: string, @Body() updateCursoDto: UpdateCursoDto) {
    const updateCourse = await this.cursosService.updateCourse(Number(id), updateCursoDto);
    if (!updateCourse) {
      throw new NotFoundException(`El id #${id} no fue encontrado`);
    }
    return updateCourse;
  }

  // ELIMINAR CURSO POR ID
  @Delete(':id')
  async deleteCourse(@Param('id') id: string) {
    return this.cursosService.deleteCourse(Number(id));
  }
  
  // OBTENER CURSOS SEGÚN EL PÚBLICO
  @Get('usuario/:id_emp')
  async obtenerCursosParaUsuario(@Param('id_emp') id_emp: string) {
    return this.cursosService.obtenerCursosParaUsuario(id_emp);
  }

  @Get("profesores")
  async getProfesores() {
    return this.cursosService.obtenerProfesores();
  }

  @Get("unidad")
  async obtenerUnidad(){
    return this.cursosService.obtenerUnidad();
  }

  @Get("periodos")
  async obtenerPeriodos(){
    return this.cursosService.obtenerPeriodos();
  }

  @Get(':id')
  async getCourseById(@Param('id', ParseIntPipe) id: number) {
    return this.cursosService.getCourseId(id);
  }


}
