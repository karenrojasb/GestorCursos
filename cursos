"use client";
import { TrashIcon, XMarkIcon, MagnifyingGlassIcon, PencilSquareIcon, ArrowDownTrayIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";
import CursoEditarModal from "../components/CursoEditarModal";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

interface Nota {
  Nota: number;
  idRegistro: number;
  FechaRegistro: string;
  NotaEspecificacion: string;
  NombreInscrito: string;
  NombreRegistro: string; 
}

interface Inscrito {
  NombreInscrito: string;
  FechaRegistro: any;
  idRegistro: string;
  id: number;
  idCur: number;
  docInscr: number;
  est: boolean;
  fecreg: string;
  Notas?: Nota[];
}

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Linea: number;
  LineaNombre: string;
  Estado: string;
  EstadoNombre: string;
  Modalidad: number;
  ModalidadNombre: string;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  NombreProfesor?: string;
  LunesIni: string;
  LunesFin: string;
  MartesIni: string;
  MartesFin: string;
  MiercolesIni: string;
  MiercolesFin: string;
  JuevesIni: string;
  JuevesFin: string;
  ViernesIni: string;
  ViernesFin: string;
  SabadoIni: string;
  SabadoFin: string;
  DomingoIni: string;
  DomingoFin: string;
  InicioInscr: string;
  FinInscr: string;
  SegundoProNombre: string;

  Inscritos?: string; // JSON string de Inscrito[]
}

interface OpcionLista {
  id: number;
  Especificacion: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [mensajeExito, setMensajeExito] = useState("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [cursoEditar, setCursoEditar] = useState<Curso | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [errorMensaje, setErrorMensaje] = useState(false);
  const [opciones, setOpciones] = useState<OpcionLista[]>([]);
  const [guardando, setGuardando] = useState(false);

  // Fetch opciones separada para no anidar en fetchCursos
  const fetchOpciones = async () => {
    try {
      const respOpciones = await fetch("http://localhost:8090/api/listas/Especificaciones");
      if (!respOpciones.ok) throw new Error("Error al obtener lista de especificaciones");
      const dataOpciones = await respOpciones.json();
      console.log("Opciones recibidas:", dataOpciones); 
      setOpciones(dataOpciones);
    } catch (error) {
      console.error("Error al obtener opciones:", error);
    }
  };

  // OBTENER CURSOS DEL BACKEND
  const fetchCursos = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("http://localhost:8090/api/cursos");
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      const data = await response.json();
      setCursos(data);
      setCursosFiltrados(data);
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
    }
    setIsLoading(false);
  };

  useEffect(() => {
    fetchCursos();
    fetchOpciones();
  }, []);

  const handleUpdate = () => {
    fetchCursos();
  };

  const formatearHorario = (curso: Curso) => {
    const dias = [
      { dia: "Lunes", ini: curso.LunesIni, fin: curso.LunesFin },
      { dia: "Martes", ini: curso.MartesIni, fin: curso.MartesFin },
      { dia: "Miércoles", ini: curso.MiercolesIni, fin: curso.MiercolesFin },
      { dia: "Jueves", ini: curso.JuevesIni, fin: curso.JuevesFin },
      { dia: "Viernes", ini: curso.ViernesIni, fin: curso.ViernesFin },
      { dia: "Sábado", ini: curso.SabadoIni, fin: curso.SabadoFin },
      { dia: "Domingo", ini: curso.DomingoIni, fin: curso.DomingoFin },
    ];

    return dias.filter(d => d.ini && d.fin);
  };

  // BUSCAR CURSOS
  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter(curso => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  const handleMouseEnter = () => {
    setIsSearchActive(true);
  };

  const handleMouseLeave = () => {
    if (busqueda === "") {
      setIsSearchActive(false);
    }
  };

  // EXPANDIR DETALLES DEL CURSO
  const handleVerMas = (id: number) => {
    setExpandedCursoId(expandedCursoId === id ? null : id);
  };

  // ELIMINAR CURSO
  const handleDeleteCourse = async (id: number) => {
    const confirmar = window.confirm("¿Estás seguro de que deseas eliminar este curso?");
    if (!confirmar) return;

    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${id}`, { method: "DELETE" });
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);

      setCursos(prev => prev.filter(curso => curso.id !== id));
      setCursosFiltrados(prev => prev.filter(curso => curso.id !== id));
    } catch (error) {
      console.error("Error al eliminar el curso:", error);
      alert("No se pudo eliminar el curso");
    }
    setIsLoading(false);
  };

  const handleEditarCurso = (curso: Curso) => {
    setCursoEditar({ ...curso });
  };

  const handleCerrarEditor = () => {
    setCursoEditar(null);
  };

  const handleGuardarEdicion = () => {
    if (cursoEditar) {
      setCursos(prevCursos =>
        prevCursos.map(curso => (curso.id === cursoEditar.id ? cursoEditar : curso))
      );
      setCursosFiltrados(prevCursos =>
        prevCursos.map(curso => (curso.id === cursoEditar.id ? cursoEditar : curso))
      );
      setCursoEditar(null);
      fetchCursos();
    }
  };

  const handleChangeEspecificacion = async (
    idInscrito: number,
    idEspecificacion: number,
    idNotaExistente?: number,
    idCur?: number,
    docInscr?: string
  ) => {
    try {
      setGuardando(true);

      const especificacionObj = opciones.find(op => op.id === idEspecificacion);
      if (!especificacionObj) {
        alert("Especificación no encontrada.");
        setGuardando(false);
        return;
      }

      const descripcion = especificacionObj.Especificacion;
      const idEmpString = localStorage.getItem("id_emp");
      if (!idEmpString) {
        alert("No se encontró el id_emp en localStorage");
        setGuardando(false);
        return;
      }

      const idEmp = Number(idEmpString);
      const notaNumerica = idEspecificacion;

      const notaData = {
        idInscrito,
        idCurso: idCur,
        docInscr,
        idRegistro: idEmp,
        Nota: notaNumerica,
        FechaRegistro: new Date(),
      };

      let response;
      if (idNotaExistente) {
        response = await fetch(`http://localhost:8090/api/notas/${idNotaExistente}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(notaData),
        });
      } else {
        response = await fetch("http://localhost:8090/api/notas", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(notaData),
        });
      }

      if (!response.ok) throw new Error(`Error al guardar nota: ${response.status}`);

      // Actualizar datos locales
      const updatedCursos = cursos.map(curso => {
        if (curso.id === idCur && curso.Inscritos) {
          const inscritosArray: Inscrito[] = JSON.parse(curso.Inscritos);
          inscritosArray.forEach(inscrito => {
            if (inscrito.idRegistro === idInscrito) {
              if (idNotaExistente) {
                // Actualizar nota existente
                if (inscrito.Notas) {
                  const notaIndex = inscrito.Notas.findIndex(n => n.idRegistro === idNotaExistente);
                  if (notaIndex !== -1) {
                    inscrito.Notas[notaIndex].Nota = notaNumerica;
                    inscrito.Notas[notaIndex].NotaEspecificacion = descripcion;
                  }
                }
              } else {
                // Agregar nueva nota
                const nuevaNota: Nota = {
                  Nota: notaNumerica,
                  idRegistro: idEmp,
                  FechaRegistro: new Date().toISOString(),
                  NotaEspecificacion: descripcion,
                  NombreInscrito: inscrito.NombreInscrito,
                  NombreRegistro: "", // podría obtenerse si se necesita
                };
                if (inscrito.Notas) {
                  inscrito.Notas.push(nuevaNota);
                } else {
                  inscrito.Notas = [nuevaNota];
                }
              }
            }
          });
          curso.Inscritos = JSON.stringify(inscritosArray);
        }
        return curso;
      });
      setCursos(updatedCursos);
      setCursosFiltrados(updatedCursos);

      setGuardando(false);
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);
    } catch (error) {
      console.error(error);
      alert("Error al guardar la especificación.");
      setGuardando(false);
    }
  };

  // EXPORTAR A EXCEL
  const exportarExcel = () => {
    if (cursosFiltrados.length === 0) {
      alert("No hay cursos para exportar");
      return;
    }

    const datosExcel = cursosFiltrados.map((curso) => ({
      ID: curso.id,
      Curso: curso.NombreCurso,
      Valor: curso.Valor,
      Público: curso.Publico,
      Periodo: curso.Periodo,
      Inicio: curso.Inicio,
      Fin: curso.Fin,
      Horas: curso.Horas,
      CupoMax: curso.CupoMax,
      Lugar: curso.Lugar,
      Línea: curso.LineaNombre,
      Estado: curso.EstadoNombre,
      Modalidad: curso.ModalidadNombre,
      Unidad: curso.Unidad,
      Profesor: curso.NombreProfesor ?? "",
      SegundoProfesor: curso.SegundoProNombre ?? "",
      Descripción: curso.Descripcion,
    }));

    const ws = XLSX.utils.json_to_sheet(datosExcel);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Cursos");
    const wbout = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const blob = new Blob([wbout], { type: "application/octet-stream" });
    saveAs(blob, "cursos.xlsx");
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50 p-4 overflow-auto">
      <div className="bg-white rounded-lg w-full max-w-7xl max-h-[90vh] overflow-auto p-6 relative">
        <button onClick={onClose} className="absolute top-4 right-4 text-gray-700 hover:text-gray-900">
          <XMarkIcon className="h-6 w-6" />
        </button>

        <h2 className="text-2xl font-bold mb-4">Catálogo de Cursos</h2>

        <div className="mb-4 flex items-center space-x-2">
          <div className={`relative ${isSearchActive || busqueda ? "border border-indigo-500" : ""} rounded-md`}>
            <input
              type="text"
              placeholder="Buscar curso..."
              value={busqueda}
              onChange={handleBuscar}
              onFocus={handleMouseEnter}
              onBlur={handleMouseLeave}
              className="px-3 py-2 focus:outline-none"
            />
            <MagnifyingGlassIcon className="absolute right-2 top-2.5 h-5 w-5 text-gray-400" />
          </div>
          <button onClick={exportarExcel} className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded flex items-center">
            <ArrowDownTrayIcon className="h-5 w-5 mr-2" /> Exportar Excel
          </button>
        </div>

        {isLoading && <p>Cargando cursos...</p>}

        {showSuccess && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded mb-4">
            Acción realizada con éxito.
          </div>
        )}

        {cursosFiltrados.length === 0 && !isLoading && <p>No se encontraron cursos.</p>}

        <ul className="space-y-4">
          {cursosFiltrados.map((curso) => (
            <li key={curso.id} className="border rounded p-4">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">{curso.NombreCurso}</h3>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleVerMas(curso.id)}
                    className="text-indigo-600 hover:underline"
                    aria-expanded={expandedCursoId === curso.id}
                  >
                    {expandedCursoId === curso.id ? "Ver menos" : "Ver más"}
                  </button>
                  <button onClick={() => handleEditarCurso(curso)} title="Editar curso" className="text-green-600 hover:text-green-800">
                    <PencilSquareIcon className="h-5 w-5" />
                  </button>
                  <button onClick={() => handleDeleteCourse(curso.id)} title="Eliminar curso" className="text-red-600 hover:text-red-800">
                    <TrashIcon className="h-5 w-5" />
                  </button>
                </div>
              </div>

              {expandedCursoId === curso.id && (
                <div className="mt-2 space-y-2 text-sm text-gray-700">
                  <p><strong>Profesor:</strong> {curso.NombreProfesor}</p>
                  <p><strong>Segundo Profesor:</strong> {curso.SegundoProNombre}</p>
                  <p><strong>Modalidad:</strong> {curso.ModalidadNombre}</p>
                  <p><strong>Estado:</strong> {curso.EstadoNombre}</p>
                  <p><strong>Unidad:</strong> {curso.Unidad}</p>
                  <p><strong>Descripción:</strong> {curso.Descripcion}</p>
                  <p><strong>Lugar:</strong> {curso.Lugar}</p>
                  <p><strong>Horario:</strong></p>
                  <ul>
                    {formatearHorario(curso).map(({ dia, ini, fin }) => (
                      <li key={dia}>{dia}: {ini} - {fin}</li>
                    ))}
                  </ul>

                  {/* Mostrar inscritos y notas */}
                  {curso.Inscritos && (
                    <div className="mt-4">
                      <h4 className="font-semibold mb-2">Inscritos</h4>
                      <table className="w-full text-sm border-collapse border border-gray-300">
                        <thead>
                          <tr className="bg-gray-100">
                            <th className="border border-gray-300 p-1">Nombre</th>
                            <th className="border border-gray-300 p-1">Fecha Inscripción</th>
                            <th className="border border-gray-300 p-1">Nota</th>
                            <th className="border border-gray-300 p-1">Especificación</th>
                          </tr>
                        </thead>
                        <tbody>
                          {JSON.parse(curso.Inscritos).map((inscrito: Inscrito) => (
                            <tr key={inscrito.idRegistro} className="border border-gray-300">
                              <td className="border border-gray-300 p-1">{inscrito.NombreInscrito}</td>
                              <td className="border border-gray-300 p-1">{new Date(inscrito.FechaRegistro).toLocaleDateString()}</td>
                              <td className="border border-gray-300 p-1">
                                {inscrito.Notas && inscrito.Notas.length > 0 ? inscrito.Notas[0].Nota : "-"}
                              </td>
                              <td className="border border-gray-300 p-1">
                                <select
                                  disabled={guardando}
                                  value={inscrito.Notas && inscrito.Notas.length > 0 ? inscrito.Notas[0].Nota : ""}
                                  onChange={(e) => {
                                    const idEspecificacion = Number(e.target.value);
                                    const idNotaExistente = inscrito.Notas && inscrito.Notas.length > 0 ? inscrito.Notas[0].idRegistro : undefined;
                                    handleChangeEspecificacion(inscrito.idRegistro, idEspecificacion, idNotaExistente, curso.id, inscrito.docInscr?.toString());
                                  }}
                                >
                                  <option value="">Seleccione</option>
                                  {opciones.map((op) => (
                                    <option key={op.id} value={op.id}>
                                      {op.Especificacion}
                                    </option>
                                  ))}
                                </select>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              )}
            </li>
          ))}
        </ul>

        {cursoEditar && (
          <CursoEditarModal curso={cursoEditar} onClose={handleCerrarEditor} onSave={handleGuardarEdicion} />
        )}
      </div>
    </div>
  );
}