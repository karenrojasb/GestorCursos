import { useState, useEffect } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  Modalidad: string;
  Estado: string;
  Profesor: string;
}

interface CursoEditarModalProps {
  cursoId: number | null;
  isOpen: boolean;
  onClose: () => void;
  onCursoActualizado: () => void;
}

const CursoEditarModal: React.FC<CursoEditarModalProps> = ({ cursoId, isOpen, onClose, onCursoActualizado }) => {
  const [curso, setCurso] = useState<Curso | null>(null);
  const [formData, setFormData] = useState<Partial<Curso>>({});

  useEffect(() => {
    if (cursoId) {
      fetch(`/api/cursos/${cursoId}`)
        .then((res) => res.json())
        .then((data) => {
          setCurso(data);
          setFormData(data);
        })
        .catch((err) => console.error("Error al obtener el curso:", err));
    }
  }, [cursoId]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!cursoId) return;

    try {
      const response = await fetch(`/api/cursos/${cursoId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error("Error al actualizar el curso");
      }

      onCursoActualizado();
      onClose();
    } catch (error) {
      console.error("Error al actualizar el curso:", error);
    }
  };

  if (!isOpen || !curso) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>Editar Curso</h2>
        <form onSubmit={handleSubmit}>
          <label>
            Nombre del Curso:
            <input type="text" name="NombreCurso" value={formData.NombreCurso || ""} onChange={handleChange} required />
          </label>

          <label>
            Valor:
            <input type="number" name="Valor" value={formData.Valor || 0} onChange={handleChange} required />
          </label>

          <label>
            Periodo:
            <input type="text" name="Periodo" value={formData.Periodo || ""} onChange={handleChange} required />
          </label>

          <label>
            Inicio:
            <input type="date" name="Inicio" value={formData.Inicio || ""} onChange={handleChange} required />
          </label>

          <label>
            Fin:
            <input type="date" name="Fin" value={formData.Fin || ""} onChange={handleChange} required />
          </label>

          <label>
            Horas:
            <input type="number" name="Horas" value={formData.Horas || 0} onChange={handleChange} required />
          </label>

          <label>
            Modalidad:
            <select name="Modalidad" value={formData.Modalidad || ""} onChange={handleChange} required>
              <option value="Presencial">Presencial</option>
              <option value="Virtual">Virtual</option>
              <option value="Híbrido">Híbrido</option>
            </select>
          </label>

          <label>
            Estado:
            <select name="Estado" value={formData.Estado || ""} onChange={handleChange} required>
              <option value="Activo">Activo</option>
              <option value="Inactivo">Inactivo</option>
            </select>
          </label>

          <label>
            Profesor:
            <input type="text" name="Profesor" value={formData.Profesor || ""} onChange={handleChange} required />
          </label>

          <button type="submit">Guardar Cambios</button>
          <button type="button" onClick={onClose}>Cancelar</button>
        </form>
      </div>
    </div>
  );
};

export default CursoEditarModal;