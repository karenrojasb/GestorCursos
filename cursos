const handleChangeEspecificacion = async (
  idInscrito: number,
  idEspecificacion: number,
  idNotaExistente?: number,
  idCur?: number,
  docInscr?: string
) => {
  try {
    setGuardando(true);

    const especificacionObj = opciones.find(op => op.id === idEspecificacion);
    if (!especificacionObj) {
      alert("EspecificaciÃ³n no encontrada.");
      return;
    }

    const descripcion = especificacionObj.Especificacion;
    const idEmpString = localStorage.getItem("id_emp");
    if (!idEmpString) {
      alert("No se encontrÃ³ el id_emp en localStorage");
      return;
    }

    const idEmp = Number(idEmpString);
    const notaNumerica = idEspecificacion;

    const notaData = {
      idInscrito,
      idCurso: idCur,
      docInscr,
      idRegistro: idEmp,
      Nota: notaNumerica,
      FechaRegistro: new Date(),
    };

    let response;
    if (idNotaExistente) {
      // PUT si ya existe una nota
      response = await fetch(`http://localhost:8090/api/notas/${idNotaExistente}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(notaData),
      });
    } else {
      // POST si es una nueva nota
      response = await fetch("http://localhost:8090/api/notas", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(notaData),
      });
    }

    if (!response.ok) throw new Error("Error al guardar la nota");

    const nuevaNota = await response.json();

    // âœ… Actualiza cursos con Inscritos como array (NO string)
    setCursos((prevCursos) =>
      prevCursos.map((curso) => {
        if (curso.id !== idCur) return curso;

        const inscritosActualizados = (curso.Inscritos || []).map((inscrito) => {
          if (inscrito.id === idInscrito) {
            return {
              ...inscrito,
              Notas: [{
                ...nuevaNota,
                NotaEspecificacion: descripcion,
              }],
            };
          }
          return inscrito;
        });

        return {
          ...curso,
          Inscritos: inscritosActualizados, // ðŸ‘ˆ Mantenlo como array
        };
      })
    );

    // âœ… Igual con cursos filtrados
    setCursosFiltrados((prevCursos) =>
      prevCursos.map((curso) => {
        if (curso.id !== idCur) return curso;

        const inscritosActualizados = (curso.Inscritos || []).map((inscrito) => {
          if (inscrito.id === idInscrito) {
            return {
              ...inscrito,
              Notas: [{
                ...nuevaNota,
                NotaEspecificacion: descripcion,
              }],
            };
          }
          return inscrito;
        });

        return {
          ...curso,
          Inscritos: inscritosActualizados,
        };
      })
    );

  } catch (error) {
    console.error("Error al guardar nota:", error);
    alert("Hubo un error al guardar la nota.");
  } finally {
    setGuardando(false);
  }
};



<select
  className="border rounded px-2 py-1 text-sm bg-white"
  value={inscrito.Notas?.[0]?.Nota ?? ""}
  onChange={(e) =>
    handleChangeEspecificacion(
      inscrito.id,                   // idInscrito
      Number(e.target.value),       // idEspecificacion
      inscrito.Notas?.[0]?.id,      // idNotaExistente
      inscrito.idCur,               // idCurso
      inscrito.docInscr             // docInscr
    )
  }
>
  <option value="">-- Selecciona --</option>
  {opciones.map((opcion) => (
    <option key={opcion.id} value={opcion.id}>
      {opcion.Especificacion}
    </option>
  ))}
</select>