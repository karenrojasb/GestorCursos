model Cursos {
  id                                Int             @id(map: "PK__Cursos__3213E83FF1A9718F") @default(autoincrement())
  NombreCurso                       String?         @db.VarChar(100)
  Valor                             Int?
  Publico                           Int?
  Periodo                           String?         @db.VarChar(10)
  Inicio                            String?         @db.VarChar(15)
  Fin                               String?         @db.VarChar(15)
  Horas                             Int?
  CupoMax                           Int?
  Lugar                             String?         @db.VarChar(50)
  LunesIni                          String?         @db.VarChar(15)
  LunesFin                          String?         @db.VarChar(15)
  MartesIni                         String?         @db.VarChar(15)
  MartesFin                         String?         @db.VarChar(15)
  MiercolesIni                      String?         @db.VarChar(15)
  MiercolesFin                      String?         @db.VarChar(15)
  JuevesIni                         String?         @db.VarChar(15)
  JuevesFin                         String?         @db.VarChar(15)
  ViernesIni                        String?         @db.VarChar(15)
  ViernesFin                        String?         @db.VarChar(15)
  SabadoIni                         String?         @db.VarChar(15)
  SabadoFin                         String?         @db.VarChar(15)
  DomingoIni                        String?         @db.VarChar(15)
  DomingoFin                        String?         @db.VarChar(15)
  Linea                             Int?
  Estado                            Int?
  Modalidad                         Int?
  Unidad                            Int?
  Profesor                          Int?
  SegundoPro                        Int?
  Proexterno                        String?         @db.VarChar(50)
  Descripcion                       String?         @db.VarChar(400)
  IdTipoCurso                       Int?
  Listas_Cursos_EstadoToListas      Listas?         @relation("Cursos_EstadoToListas", fields: [Estado], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Cursos__Estado__59063A47")
  Listas_Cursos_IdTipoCursoToListas Listas?         @relation("Cursos_IdTipoCursoToListas", fields: [IdTipoCurso], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Cursos__IdTipoCu__59FA5E80")
  Listas_Cursos_LineaToListas       Listas?         @relation("Cursos_LineaToListas", fields: [Linea], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Cursos__Linea__5AEE82B9")
  Listas_Cursos_ModalidadToListas   Listas?         @relation("Cursos_ModalidadToListas", fields: [Modalidad], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Cursos__Modalida__5BE2A6F2")
  Listas_Cursos_PublicoToListas     Listas?         @relation("Cursos_PublicoToListas", fields: [Publico], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Cursos__Publico__5CD6CB2B")
  Inscripciones                     Inscripciones[]




import { Controller, Get, Post, Put, Delete, Param, Body, NotFoundException } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}

  // CREAR CURSO
  @Post()
  async createCourses(@Body() data: CreateCursoDto) {
    console.log("Recibiendo datos:", data);
    return this.cursosService.createCourses(data);
  }

  // OBTENER TODOS LOS CURSOS (YA CON EL NOMBRE DEL PROFESOR)
  @Get()
  async getCourses() {
    return this.cursosService.getCourses();
  }

  // OBTENER ESPECIFICACIONES PARA EL DESPLEGABLE
  @Get('especificaciones')
  async getEspecificaciones() {
    return this.cursosService.getEspecificaciones();
  }

  // ACTUALIZAR CURSO POR ID
  @Put(':id')
  async updateCourse(@Param('id') id: string, @Body() updateCursoDto: UpdateCursoDto) {
    const updateCourse = await this.cursosService.updateCourse(Number(id), updateCursoDto);
    if (!updateCourse) {
      throw new NotFoundException(`El id #${id} no fue encontrado`);
    }
    return updateCourse;
  }

  // ELIMINAR CURSO POR ID
  @Delete(':id')
  async deleteCourse(@Param('id') id: string) {
    return this.cursosService.deleteCourse(Number(id));
  }
}





import { Injectable, BadRequestException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateCursoDto } from './dto/create-curso.dto';

@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}

  // CREAR CURSO
  async createCourses(data: CreateCursoDto) {
    console.log("Data recibida:", data);
    try {
      return await this.prisma.cursos.create({ data });
    } catch (error) {
      console.error("Error al crear el curso en el backend", error);
      throw new BadRequestException("Error al crear el curso");
    }
  }

  // OBTENER TODOS LOS CURSOS (CON COLUMNAS EN MAYÚSCULA)
  async getCourses() {
    return this.prisma.$queryRaw`
      SELECT 
        c.id AS Id, 
        c.nombre_curso AS NombreCurso, 
        c.valor AS Valor, 
        c.publico AS Publico, 
        c.periodo AS Periodo, 
        c.inicio AS Inicio, 
        c.fin AS Fin, 
        c.horas AS Horas, 
        c.cupo_max AS CupoMax,
        c.lugar AS Lugar, 
        c.estado AS Estado, 
        c.modalidad AS Modalidad, 
        c.unidad AS Unidad, 
        c.profesor AS Profesor, 
        c.segundo_pro AS SegundoPro,
        c.proexterno AS ProExterno,
        c.descripcion AS Descripcion, 
        c.id_tipo_curso AS IdTipoCurso,
        e.nombre AS NombreProfesor  -- Se obtiene el nombre del profesor
      FROM gescur.Cursos c
      LEFT JOIN gescur.emp_nomina e ON c.profesor = e.id_emp
    `;
  }

  // OBTENER OPCIONES PARA EL DESPLEGABLE
  async getEspecificaciones() {
    try {
      return await this.prisma.listas.findMany(); // Asegúrate de que 'listas' es la tabla correcta
    } catch (error) {
      console.error("Error al obtener las especificaciones:", error);
      throw new BadRequestException("Error al obtener las especificaciones");
    }
  }

  // OBTENER CURSO POR ID
  async getCourseId(id: number) {
    return this.prisma.cursos.findUnique({ where: { id } });
  }

  // ACTUALIZAR CURSO POR ID
  async updateCourse(id: number, data: Prisma.CursosUpdateInput) {
    console.log('ID recibido:', id);
    console.log('Datos recibidos:', data);
    try {
      return await this.prisma.cursos.update({
        where: { id },
        data,
      });
    } catch (error) {
      console.error('Error al actualizar el curso:', error);
      throw new BadRequestException('El curso no se pudo actualizar');
    }
  }

  // ELIMINAR CURSO POR ID
  async deleteCourse(id: number) {
    return this.prisma.cursos.delete({ where: { id } });
  }
}
