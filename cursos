import { Injectable } from '@nestjs/common';
import { CreateRolUsuarioDto } from './dto/create-rol_usuario.dto';
import { UpdateRolUsuarioDto } from './dto/update-rol_usuario.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';

@Injectable()
export class RolUsuarioService {

  updateRolUsuario(arg0: number, UpdateRolUsuarioDto: UpdateRolUsuarioDto) {
      throw new Error('Method not implemented.');
    }
    constructor(private readonly prisma: PrismaService) {}
  
  //  OBTENER TODAS LAS NOTAS
    async findAll(){
      return this.prisma.rol_usuario.findMany();
    }
  
    //  MÉTODO PARA CREAR NOTA
      async createRolUuario(CreateRolUsuarioDto: CreateRolUsuarioDto) {
        const newRolUsuario = await this.prisma.rol_usuario.create({
          data: {
            id_rol: CreateRolUsuarioDto.id_rol,
            usuario: CreateRolUsuarioDto.usuario,
          },
        });
        return newRolUsuario;
      }

       // MÉTODO PARA ACTUALIZAR
    async UpdateRolUsuario (id: number, data: Prisma.rol_usuarioUpdateInput){
      console.log ('id received:', id);
      console.log ('data received:', data);

      try {
        const UpdateRolUsuario = await this.prisma.rol_usuario.update({
          where: {id},
          data,
        });
        console.log ('update rol:', UpdateRolUsuario);
        return UpdateRolUsuario;
      }
      catch (error){
        console.error ('error when updating Rol:', error);
        throw new error('the Rol was not updated');
      }
    }

    // MÉTODO PARA ELIMINAR
    async deleteRolUsuario(id:number){
      return this.prisma.rol_usuario.delete({where: {id}});
    }


}
