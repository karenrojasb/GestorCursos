Error: `value` prop on `select` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.
    at createUnhandledError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:689:49)
    at handleClientError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:856:56)
    at console.error (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_523921._.js:991:56)
    at validatePropertiesInDevelopment (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:8838:400)
    at setInitialProperties (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:9114:9)
    at completeWork (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7326:35)
    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:631:20)
    at completeUnitOfWork (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:8020:23)
    at performUnitOfWork (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7957:28)
    at workLoopSync (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7847:40)
    at renderRootSync (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7830:13)
    at performWorkOnRoot (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:7565:211)
    at performWorkOnRootViaSchedulerTask (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_react-dom_1f56dc._.js:8394:9)
    at MessagePort.performWorkUntilDeadline (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_107ce8._.js:2353:64)// ACTUALIZAR CURSO POR ID
async updateCourse(id: number, data: Prisma.CursosUpdateInput) {
  console.log('ID recibido:', id);
  console.log('Datos recibidos:', data);

  try {
    // Actualizar el curso
    const cursoActualizado = await this.prisma.cursos.update({
      where: { id },
      data,
    });

    // Si viene un nuevo Profesor
    if (data.Profesor && typeof data.Profesor === 'object' && 'set' in data.Profesor) {
      const idProfesor = data.Profesor.set;

      const profesorEmail = await this.prisma.$queryRaw<{ e_mail: string }[]>`
        SELECT e_mail FROM gescur.emp_nomina WHERE id_emp = CAST(${idProfesor} AS VARCHAR)
      `;

      if (profesorEmail.length > 0) {
        const email = profesorEmail[0].e_mail;

        const yaExiste = await this.prisma.$queryRaw<{ count: number }[]>`
          SELECT COUNT(*) as count FROM gescur.rol_usuario WHERE usuario = ${email}
        `;

        if (yaExiste[0].count === 0) {
          await this.prisma.$executeRaw`
            INSERT INTO gescur.rol_usuario (usuario, id_rol)
            VALUES (${email}, 2)
          `;
        }
      }
    }

    // Si viene un nuevo SegundoPro
    if (data.SegundoPro && typeof data.SegundoPro === 'object' && 'set' in data.SegundoPro) {
      const idSegundoPro = data.SegundoPro.set;

      const segundoEmail = await this.prisma.$queryRaw<{ e_mail: string }[]>`
        SELECT e_mail FROM gescur.emp_nomina WHERE id_emp = CAST(${idSegundoPro} AS VARCHAR)
      `;

      if (segundoEmail.length > 0) {
        const email = segundoEmail[0].e_mail;

        const yaExiste = await this.prisma.$queryRaw<{ count: number }[]>`
          SELECT COUNT(*) as count FROM gescur.rol_usuario WHERE usuario = ${email}
        `;

        if (yaExiste[0].count === 0) {
          await this.prisma.$executeRaw`
            INSERT INTO gescur.rol_usuario (usuario, id_rol)
            VALUES (${email}, 2)
          `;
        }
      }
    }

    return cursoActualizado;
  } catch (error) {
    console.error('Error al actualizar el curso:', error);
    throw new Error('El curso no se pudo actualizar');
  }
}
