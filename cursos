async updateCourse(id: number, data: Prisma.CursosUpdateInput) {
  console.log('ID recibido:', id);
  console.log('Datos recibidos:', data);

  try {
    // Actualiza el curso
    const cursoActualizado = await this.prisma.cursos.update({
      where: { id },
      data,
    });

    // Si hay profesor, verificar si está en rol_usuario
    if (data.Profesor) {
      const profesorId = data.Profesor as number;

      const profesorEmail = await this.prisma.$queryRaw<{ e_mail: string }[]>`
        SELECT e_mail FROM gescur.emp_nomina WHERE id_emp = CAST(${profesorId} AS VARCHAR)
      `;

      if (profesorEmail.length > 0) {
        const email = profesorEmail[0].e_mail;

        const yaExiste = await this.prisma.$queryRaw<{ count: number }[]>`
          SELECT COUNT(*) as count FROM gescur.rol_usuario WHERE usuario = ${email}
        `;

        if (yaExiste[0].count === 0) {
          await this.prisma.$executeRaw`
            INSERT INTO gescur.rol_usuario (usuario, id_rol)
            VALUES (${email}, 2)
          `;
        }
      }
    }

    // Si hay SegundoPro, verificar si está en rol_usuario
    if (data.SegundoPro) {
      const segundoId = data.SegundoPro as number;

      const segundoEmail = await this.prisma.$queryRaw<{ e_mail: string }[]>`
        SELECT e_mail FROM gescur.emp_nomina WHERE id_emp = CAST(${segundoId} AS VARCHAR)
      `;

      if (segundoEmail.length > 0) {
        const email = segundoEmail[0].e_mail;

        const yaExiste = await this.prisma.$queryRaw<{ count: number }[]>`
          SELECT COUNT(*) as count FROM gescur.rol_usuario WHERE usuario = ${email}
        `;

        if (yaExiste[0].count === 0) {
          await this.prisma.$executeRaw`
            INSERT INTO gescur.rol_usuario (usuario, id_rol)
            VALUES (${email}, 2)
          `;
        }
      }
    }

    return cursoActualizado;

  } catch (error) {
    console.error('Error al actualizar el curso:', error);
    throw new Error('El curso no se pudo actualizar');
  }
}