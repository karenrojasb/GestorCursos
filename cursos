{Object.entries(groupedInscripciones).map(([cursoId, inscripciones]) => {
  const cursoAbierto = expandedCursos[Number(cursoId)] || false;
  const cursoNombre = inscripciones[0]?.NombreCurso || `Curso ${cursoId}`;
  const fechaInicio = inscripciones[0]?.fecini
    ? new Date(inscripciones[0].fecini).toLocaleDateString()
    : "Sin fecha";
  const fechaFin = inscripciones[0]?.fecfin
    ? new Date(inscripciones[0].fecfin).toLocaleDateString()
    : "Sin fecha";

  return (
    <div key={cursoId} className="border rounded shadow-md">
      <div className="flex justify-between items-center bg-gray-100 px-4 py-3">
        <div>
          <h3 className="text-lg font-bold text-[#990000]">{cursoNombre}</h3>
          <p className="text-sm text-gray-600">
            <span className="font-medium">Inicio:</span> {fechaInicio} &nbsp; | &nbsp;
            <span className="font-medium">Fin:</span> {fechaFin}
          </p>
        </div>
        <div className="flex gap-3">
          <button
            onClick={() => handleDownloadExcelByCurso(Number(cursoId))}
            className="flex items-center bg-green-600 text-white px-3 py-1.5 rounded-md hover:bg-green-700 transition"
          >
            <ArrowDownTrayIcon className="h-5 w-5 mr-1" />
            Descargar
          </button>
          <button
            onClick={() => toggleCurso(Number(cursoId))}
            className="flex items-center bg-[#990000] text-white px-3 py-1.5 rounded-md hover:bg-[#7a0000] transition"
          >
            {cursoAbierto ? (
              <>
                <ChevronUpIcon className="h-5 w-5 mr-1" />
                Ver menos
              </>
            ) : (
              <>
                <ChevronDownIcon className="h-5 w-5 mr-1" />
                Ver m√°s
              </>
            )}
          </button>
        </div>
      </div>