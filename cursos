[Nest] 12000  - 17/03/2025, 1:28:57 p. m.   ERROR [ExceptionsHandler] PrismaClientKnownRequestError:
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `5`. Message: `Named Pipes Provider: Could not open a connection to SQL Server [5]. `
    at Bn.handleRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:7362)
    at Bn.handleAndLogRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6686)
    at Bn.request (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6393)
    at async l (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:130:9645)
    at async UsuarioService.iniciarSesion (C:\Users\desarrollador5\Documents\gestor_cursos\src\usuario\usuario.service.ts:9:21)
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-execution-context.js:46:28
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-proxy.js:9:17 {
  code: 'P2010',
  clientVersion: '6.3.1',
  meta: {
    code: '5',
    message: 'Named Pipes Provider: Could not open a connection to SQL Server [5]. '       
  }
}
[Nest] 12000  - 17/03/2025, 1:30:05 p. m.   ERROR [ExceptionsHandler] PrismaClientKnownRequestError:
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `58`. Message: `Named Pipes Provider: Could not open a connection to SQL Server [58]. `
    at Bn.handleRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:7362)
    at Bn.handleAndLogRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6686)
    at Bn.request (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6393)
    at async l (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:130:9645)
    at async UsuarioService.iniciarSesion (C:\Users\desarrollador5\Documents\gestor_cursos\src\usuario\usuario.service.ts:9:21)
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-execution-context.js:46:28
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-proxy.js:9:17 {
  code: 'P2010',
  clientVersion: '6.3.1',
  meta: {
    code: '58',
    message: 'Named Pipes Provider: Could not open a connection to SQL Server [58]. '      
  }
}
[Nest] 12000  - 17/03/2025, 1:30:16 p. m.   ERROR [ExceptionsHandler] PrismaClientKnownRequestError:
Invalid `prisma.$queryRaw()` invocation:


Raw query failed. Code: `58`. Message: `Named Pipes Provider: Could not open a connection to SQL Server [58]. `
    at Bn.handleRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:7362)
    at Bn.handleAndLogRequestError (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6686)
    at Bn.request (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:121:6393)
    at async l (C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@prisma\client\runtime\library.js:130:9645)
    at async UsuarioService.iniciarSesion (C:\Users\desarrollador5\Documents\gestor_cursos\src\usuario\usuario.service.ts:9:21)
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-execution-context.js:46:28
    at async C:\Users\desarrollador5\Documents\gestor_cursos\node_modules\@nestjs\core\router\router-proxy.js:9:17 {
  code: 'P2010',
  clientVersion: '6.3.1',
  meta: {
    code: '58',
    message: 'Named Pipes Provider: Could not open a connection to SQL Server [58]. '      
  }
}



model Cursos {
  id                                Int             @id(map: "PK__Cursos__3213E83FF1A9718F") @default(autoincrement())
  NombreCurso                       String?         @db.VarChar(100)
  Valor                             Int?
  Publico                           Int?
  Periodo                           String?         @db.VarChar(10)
  Inicio                            String?         @db.VarChar(15)
  Fin                               String?         @db.VarChar(15)
  Horas                             Int?
  CupoMax                           Int?
  Lugar                             String?         @db.VarChar(50)
  LunesIni                          String?         @db.VarChar(15)
  LunesFin                          String?         @db.VarChar(15)
  MartesIni                         String?         @db.VarChar(15)
  MartesFin                         String?         @db.VarChar(15)
  MiercolesIni                      String?         @db.VarChar(15)
  MiercolesFin                      String?         @db.VarChar(15)
  JuevesIni                         String?         @db.VarChar(15)
  JuevesFin                         String?         @db.VarChar(15)
  ViernesIni                        String?         @db.VarChar(15)
  ViernesFin                        String?         @db.VarChar(15)
  SabadoIni                         String?         @db.VarChar(15)
  SabadoFin                         String?         @db.VarChar(15)
  DomingoIni                        String?         @db.VarChar(15)
  DomingoFin                        String?         @db.VarChar(15)
  Linea                             Int?
  Estado                            Int?
  Modalidad                         Int?
  Unidad                            Int?
  Profesor                          Int?
  SegundoPro                        Int?
  Proexterno                        String?         @db.VarChar(50)
  Descripcion                       String?         @db.VarChar(400)
  IdTipoCurso                       Int?

import { Body, Controller, Delete, Get, NotFoundException, Param, Post, Put } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}

  // CREAR CURSO
  @Post()
  async createCourses(@Body() data: CreateCursoDto) {
    console.log("Recibiendo datos:", data);
    return this.cursosService.createCourses(data);
  }

  // OBTENER TODOS LOS CURSOS
  @Get() 
  async getCourses() {
    return this.cursosService.getCourses();
  }

  // OBTENER ESPECIFICACIONES PARA EL DESPLEGABLE
  @Get('especificaciones')
  async getEspecificaciones() {
    return this.cursosService.getEspecificaciones();
  }

  // ACTUALIZAR CURSO POR ID
  @Put(':id')
  async updateCourse(@Param('id') id: string, @Body() updateCursoDto: UpdateCursoDto) {
    const updateCourse = await this.cursosService.updateCourse(Number(id), updateCursoDto);
    if (!updateCourse) {
      throw new NotFoundException(`El id #${id} no fue encontrado`);
    }
    return updateCourse;
  }

  // ELIMINAR CURSO POR ID
  @Delete(':id')
  async deleteCourse(@Param('id') id: string) {
    return this.cursosService.deleteCourse(Number(id));
  }
}



import { BadRequestException, Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';
import { CreateCursoDto } from './dto/create-curso.dto';

@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}

  // CREAR CURSO
  async createCourses(data: CreateCursoDto) {
    console.log("Data recibida:", data);
    try {
      return await this.prisma.cursos.create({ data });
    } catch (error) {
      console.error("Error al crear el curso en el backend", error);
      throw new Error("Error al crear el curso");
    }
  }

  // OBTENER TODOS LOS CURSOS
  async getCourses() {
    return this.prisma.cursos.findMany();
  }

  // OBTENER OPCIONES PARA EL DESPLEGABLE
  async getEspecificaciones() {
    try {
      return await this.prisma.listas.findMany(); // Aseg√∫rate de que 'listas' es la tabla correcta
    } catch (error) {
      console.error("Error al obtener las especificaciones:", error);
      throw new Error("Error al obtener las especificaciones");
    }
  }

  // OBTENER CURSO POR ID
  async getCourseId(id: number) {
    return this.prisma.cursos.findUnique({ where: { id } });
  }

  // ACTUALIZAR CURSO POR ID
  async updateCourse(id: number, data: Prisma.CursosUpdateInput) {
    console.log('ID recibido:', id);
    console.log('Datos recibidos:', data);
    try {
      return await this.prisma.cursos.update({
        where: { id },
        data,
      });
    } catch (error) {
      console.error('Error al actualizar el curso:', error);
      throw new Error('El curso no se pudo actualizar');
    }
  }

  // ELIMINAR CURSO POR ID
  async deleteCourse(id: number) {
    return this.prisma.cursos.delete({ where: { id } });
  }
}
