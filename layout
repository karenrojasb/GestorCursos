const iniciarSesion = async () => {
  setError("");

  if (e_mail.trim() === "") {
    setError("Ingrese su email.");
    return;
  }

  try {
    const response = await fetch("http://localhost:8090/api/usuario/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ e_mail }),
    });

    if (!response.ok) {
      throw new Error("El email no es correcto o no tiene permisos.");
    }

    const data = await response.json();
    console.log("Datos recibidos del backend:", data);

    if (!data.publico) {
      throw new Error("No tiene permisos para ingresar al sistema.");
    }

    // Guardar usuario autenticado con id_emp
    const nuevoUsuario: Usuario = {
      nombre: data.nombre,
      publico: data.publico,
      esAdmin: Boolean(data.esAdmin),
      docInscr: data.docInscr || "",
      id_emp: data.id_emp, // Guardar el ID del empleado
    };

    setUsuario(nuevoUsuario);
    localStorage.setItem("usuario", JSON.stringify(nuevoUsuario));
  } catch (error: any) {
    setError(error.message);
  }
};




import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class UsuarioService {
  constructor(private prisma: PrismaService) {}

  async iniciarSesion(e_mail: string) {
    // Buscar usuario en la vista gescur.emp_nomina
    const usuario = await this.prisma.$queryRaw<
      { id_emp: number; nombre: string; publico: number; e_mail: string }[]
    >`
      SELECT id_emp, nombre, publico, e_mail 
      FROM gescur.emp_nomina 
      WHERE TRIM(e_mail) = TRIM(${e_mail})`;

    if (!usuario || usuario.length === 0) {
      throw new NotFoundException('Usuario no encontrado en la base de datos.');
    }

    const usuarioEncontrado = usuario[0];

    // Buscar si el usuario es administrador en gescur.rol_usuario
    const adminRecord = await this.prisma.rol_usuario.findFirst({
      where: { usuario: usuarioEncontrado.e_mail },
    });

    return {
      id_emp: usuarioEncontrado.id_emp,
      nombre: usuarioEncontrado.nombre,
      publico: usuarioEncontrado.publico,
      e_mail: usuarioEncontrado.e_mail,
      esAdmin: !!adminRecord, // True si es administrador
    };
  }
}


import { Controller, Post, Body } from '@nestjs/common';
import { UsuarioService } from './usuario.service';

@Controller('usuario')
export class UsuarioController {
  constructor(private readonly usuarioService: UsuarioService) {}

  @Post('login')
  async login(@Body() body: { e_mail: string }) {
    if (!body.e_mail || body.e_mail.trim() === '') {
      throw new Error('El email es obligatorio');
    }

    return this.usuarioService.iniciarSesion(body.e_mail);
  }
}


