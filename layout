

"use client";
import { ReactNode, useState, useEffect } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import MainButtonsProps from "./components/mainbuttons";
import "./globals.css";

interface LayoutProps {
  children: ReactNode;
}

interface Usuario {
  nombre: string;
  publico: number;
  esAdmin: boolean;
  esProfesor: boolean; 
}

export default function RootLayout({ children }: LayoutProps) {
  const [usuario, setUsuario] = useState<Usuario | null>(null);
  const [e_mail, setEmail] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    // RECUPERAR ID_EMP DEL LOCALSTORAGE AL INICIAR LA APLICACIÓN
    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      console.log("ID de empleado recuperado:", storedIdEmp);
    }
  }, []);

  // FUNCIÓN PARA INICIAR SESIÓN Y OBTENER DATOS DEL USUARIO
  const iniciarSesion = async () => {
    setError("");

    if (e_mail.trim() === "") {
      setError("Ingrese su email.");
      return;
    }

    try {
      const response = await fetch("http://localhost:8090/api/usuario/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ e_mail }),
      });

      const data = await response.json();
      console.log("Datos recibidos del backend:", data);

      if (!response.ok) {
        throw new Error(data.message || "El email no es correcto.");
      }

      // VERIFICA SI EL USUARIO TIENE UN ID VALIDO
      if (!data.id_emp) {
        throw new Error("No se encontró el documento del usuario.");
      }

      // VERIFIVAR SI EL USUARIO TIENE UN ROL PERMITIDO
      const esUsuarioValido = data.publico === 1 || data.publico === 2 || Boolean(data.esAdmin);
      if (!esUsuarioValido) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      // GUARDAR ID_EMP EN LOCALSTORAGE
      localStorage.setItem("id_emp", data.id_emp);

      // GUARDAR USUARIO EN EL ESTADO
      setUsuario({
        nombre: data.nombre,
        publico: data.publico,
        esAdmin: Boolean(data.esAdmin),
        esProfesor: Boolean(data.esProfesor),
      });
    } catch (error: any) {
      setError(error.message);
    }
  };

  // FUNCIÓN PARA CERRAR SESIÓN
  const cerrarSesion = () => {
    setUsuario(null);
    localStorage.removeItem("id_emp"); 
  };

  // RENDERIZA EL FORMULARIO DE LOGIN SI NO HAY USUARIO
  if (!usuario) {
    return (
      <html lang="es">
        <body className="flex items-center justify-center h-screen bg-gray-200">
          <div className="bg-white p-6 rounded-lg shadow-lg w-80 text-center">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Iniciar Sesión</h2>
            <input
              type="text"
              placeholder="Ingrese su email"
              value={e_mail}
              onChange={(e) => setEmail(e.target.value)}
              className="border p-2 w-full mb-3 rounded"
            />
            <button
              onClick={iniciarSesion}
              className="bg-[#990000] text-white px-4 py-2 rounded w-full hover:bg-red-700 transition"
            >
              Entrar
            </button>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </div>
        </body>
      </html>
    );
  }

  // SI EL USUARIO YA ESTÁ AUTENTICADO, MUESTRA LA INTERFAZ PRINCIPAL
  return (
    <html lang="es">
      <body className="bg-gray-100 flex flex-col min-h-screen">
        <header className="w-full flex items-center justify-between px-6 py-2 bg-white shadow-md">
          <img
            src="/img/ecijg126.png"
            alt="Logo"
            className="h-20 transition-transform duration-300 ease-in-out hover:scale-110 active:scale-95"
          />
          <div className="flex flex-col items-end ml-auto">
            <span className="text-xl font-medium text-gray-800">{usuario.nombre}</span>
            <button
              className="border text-[#990000]  border-[#990000] px-2 py-1 rounded hover:bg-[#990000] hover:text-white transition"
              onClick={cerrarSesion}
            >
              Cerrar Sesión
            </button>
          </div>
        </header>

        <main className="flex flex-col items-center justify-start flex-1 px-6 py-2 ">
          <motion.h1
            className="text-4xl font-bold text-[#990000] mb-6 text-center"
            initial={{ opacity: 5, y: -10 }}
            animate={{ opacity: 5, y: 100 }}
            transition={{ duration: 1.0 }}
          >
            Bienvenido a Gestión de Cursos
          </motion.h1>

          {/* PASAMOS LOS ROLES AL COMPONENTE DE BOTONES */}

          <MainButtonsProps publico={usuario.publico} esAdmin={usuario.esAdmin} esProfesor={usuario.esProfesor} onSelect={() => {}} />


          {children}
        </main>
        
        <div className="ml-4 bg-blue-800 text-white rounded-lg w-48 h-20 p-2 flex justify-center items-center shadow-lg mb-6"> 
          <Image src="/img/osiris 2.png" alt="Logo OSIRIS" width={200} height={60} />
          </div>

        <footer className="bg-white items-center  py-2 shadow-inner w-full">
               
            <p className="text-gray-700 text-center ">
              &copy; {new Date().getFullYear()} - Plataforma de gestión de cursos
            </p>
           
          
        </footer>
      </body>
    </html>
  );
}
