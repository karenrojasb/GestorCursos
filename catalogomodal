"use client";

import { useState, useEffect, ReactNode } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import MainButtonsProps from "./components/mainbuttons";
import CatalogoModal from "./components/CatalogoModal"; // Modal de cursos
import "./globals.css";

// Interfaz para definir la estructura del usuario autenticado
interface Usuario {
  nombre: string;
  publico: number; // 1 = Profesor, 2 = Administración
  esAdmin: boolean; // true si es administrador
  docInscr: string; // Documento de identidad para inscripciones
}

interface LayoutProps {
  children: ReactNode;
}

export default function RootLayout({ children }: LayoutProps) {
  const [usuario, setUsuario] = useState<Usuario | null>(null);
  const [e_mail, setEmail] = useState("");
  const [error, setError] = useState("");
  const [mostrarCatalogo, setMostrarCatalogo] = useState(false); // Estado para el modal de catálogo

  useEffect(() => {
    // Recuperar usuario desde localStorage si está almacenado
    const storedDocInscr = localStorage.getItem("docInscr");
    const storedUsuario = localStorage.getItem("usuario");
    if (storedDocInscr && storedUsuario) {
      setUsuario(JSON.parse(storedUsuario));
    }
  }, []);

  // FUNCIÓN PARA INICIAR SESIÓN
  const iniciarSesion = async () => {
    setError("");

    if (e_mail.trim() === "") {
      setError("Ingrese su email.");
      return;
    }

    try {
      const response = await fetch("http://localhost:8090/api/usuario/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ e_mail }),
      });

      const data = await response.json();
      console.log("Datos recibidos del backend:", data);

      if (!response.ok) {
        throw new Error(data.message || "El email no es correcto.");
      }

      if (!data.publico) {
        throw new Error("No tiene permisos para ingresar al sistema.");
      }

      // Guardar datos en localStorage
      localStorage.setItem("docInscr", data.docInscr);
      localStorage.setItem("usuario", JSON.stringify(data));

      // Guardar usuario en el estado
      setUsuario({
        nombre: data.nombre,
        publico: data.publico,
        esAdmin: Boolean(data.esAdmin),
        docInscr: data.docInscr,
      });
    } catch (error: any) {
      setError(error.message);
    }
  };

  // FUNCIÓN PARA CERRAR SESIÓN
  const cerrarSesion = () => {
    setUsuario(null);
    localStorage.removeItem("docInscr");
    localStorage.removeItem("usuario");
  };

  // FORMULARIO DE LOGIN SI NO HAY USUARIO AUTENTICADO
  if (!usuario) {
    return (
      <html lang="es">
        <body className="flex items-center justify-center h-screen bg-gray-200">
          <div className="bg-white p-6 rounded-lg shadow-lg w-80 text-center">
            <h2 className="text-2xl font-bold mb-4 text-gray-800">Iniciar Sesión</h2>
            <input
              type="text"
              placeholder="Ingrese su email"
              value={e_mail}
              onChange={(e) => setEmail(e.target.value)}
              className="border p-2 w-full mb-3 rounded"
            />
            <button
              onClick={iniciarSesion}
              className="bg-[#990000] text-white px-4 py-2 rounded w-full hover:bg-red-700 transition"
            >
              Entrar
            </button>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </div>
        </body>
      </html>
    );
  }

  // INTERFAZ PRINCIPAL SI EL USUARIO ESTÁ AUTENTICADO
  return (
    <html lang="es">
      <body className="bg-gray-100 flex flex-col min-h-screen">
        <header className="w-full flex items-center justify-between px-6 py-4 bg-white shadow-md">
          <img
            src="/img/ecijg126.png"
            alt="Logo"
            className="h-20 transition-transform duration-300 ease-in-out hover:scale-110 active:scale-95"
          />
          <div className="flex flex-col items-center ml-auto">
            <span className="text-xl font-medium text-gray-700">{usuario.nombre}</span>
            <button
              className="border border-[#990000] px-3 py-2 rounded hover:bg-[#990000] hover:text-white transition"
              onClick={cerrarSesion}
            >
              Cerrar Sesión
            </button>
          </div>
        </header>

        <main className="flex flex-col items-center justify-center flex-1 p-6">
          <motion.h1
            className="text-3xl font-bold text-[#990000] mb-6 text-center"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            Bienvenido a Gestión de Cursos
          </motion.h1>

          {/* BOTONES PRINCIPALES SEGÚN ROL */}
          <MainButtonsProps
            publico={usuario.publico}
            esAdmin={usuario.esAdmin}
            onSelect={(opcion) => {
              if (opcion === "Catalogo") setMostrarCatalogo(true);
            }}
          />

          {/* RENDERIZAR MODAL DE CATÁLOGO DE CURSOS */}
          {mostrarCatalogo && <CatalogoModal onClose={() => setMostrarCatalogo(false)} docInscr={usuario.docInscr} />}

          {children}
        </main>

        <footer className="bg-white text-center py-4 shadow-inner w-full">
          <div className="flex items-center justify-between px-6">
            <p className="text-gray-700">
              &copy; {new Date().getFullYear()} - Plataforma de gestión de cursos
            </p>
            <Image src="/img/osiris 2.png" alt="Logo OSIRIS" width={160} height={60} />
          </div>
        </footer>
      </body>
    </html>
  );
}