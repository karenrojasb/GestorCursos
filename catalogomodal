const handleInscripcion = async (idCur: number, estaInscrito: boolean, inscripcionId?: number) => {
  setInscribiendo(true);
  setErrorInscripcion(null);

  if (!idEmp) {
    setErrorInscripcion("Error: No se encuentra el documento de usuario.");
    setInscribiendo(false);
    return;
  }

  try {
    if (estaInscrito && inscripcionId) {
      // **CANCELAR INSCRIPCI√ìN**
      const response = await fetch(`http://localhost:8090/api/inscripciones/${inscripcionId}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ est: false }),
      });

      if (!response.ok) throw new Error("Error al cancelar inscripci√≥n");

    } else {
      // **INSCRIBIRSE**
      const fecreg = new Date().toISOString().split("T")[0];
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idCur, docInscr: idEmp, est: true, fecreg }),
      });

      if (!response.ok) throw new Error("Error al inscribirse");
    }

    // üîÑ **Actualizar lista de inscripciones despu√©s de la acci√≥n**
    const updatedResponse = await fetch(`http://localhost:8090/api/inscripciones?docInscr=${idEmp}`);
    if (!updatedResponse.ok) throw new Error("Error al obtener inscripciones actualizadas");
    const updatedData = await updatedResponse.json();
    setInscripciones(updatedData);

  } catch (error) {
    setErrorInscripcion("Ocurri√≥ un error. Int√©ntalo de nuevo.");
  }

  setInscribiendo(false);
};