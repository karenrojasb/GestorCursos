import { Body, Controller, Delete, Get, NotFoundException, Param, Post, Put } from '@nestjs/common';
import { CursosService } from './cursos.service';
import { CreateCursoDto } from './dto/create-curso.dto';
import { UpdateCursoDto } from './dto/update-curso.dto';

@Controller('cursos')
export class CursosController {
  constructor(private readonly cursosService: CursosService) {}

  //ENVIAR CREAR CURSOS
  @Post()
  async createCourses(@Body() data: CreateCursoDto){
    console.log("Recibiendo datos:", CreateCursoDto);
    return this.cursosService.createCourses(data);
  }

  //OBTENER CURSOS
  @Get() 
  async getCourses (){
    return this.cursosService.getCourses();
  }


  //ACTUALIZAR CURSO POR ID
  @Put(':id')
  async updateCourse(@Param('id') id: string, @Body() UpdateCursoDto: UpdateCursoDto) {
    const updateCourse = await this.cursosService.UpdateCourse(Number(id), UpdateCursoDto)
    if (!updateCourse) {
      throw new NotFoundException(`The id #${id} not found`);
  }
  return updateCourse;
}

  //ELIMINAR CURSOS
  @Delete (':id' )
  async deletecourse(@Param('id') id: string){
    return this.cursosService.deleteCourse(Number(id));
  }  
}



import { BadRequestException, Injectable } from '@nestjs/common';
import { CreateCursoDto } from './dto/create-curso.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { Prisma } from '@prisma/client';



@Injectable()
export class CursosService {
  constructor(private readonly prisma: PrismaService) {}


  //MÉTODO PARA CREAR UN NUEVO CURSO
  // async createCourses(CreateCursoDto: CreateCursoDto){
  //   console.log("Datos recibidos:", CreateCursoDto);

  //   const TipoCurso = await this.prisma.TipoCurso.findUnique({
  //     where: { id: CreateCursoDto.IdTipoCurso}
  //   });

  //   if (!TipoCurso){
  //     throw new BadRequestException("El IdTipoCurso no existe en l base de datos");
  //   }
  //   return this.prisma.cursos.create({data: CreateCursoDto});
  // }


  async createCourses(data: CreateCursoDto) {
    console.log("Data recibida:", data);

    try {
      const nuevoCurso = await this.prisma.cursos.create({data});

      return nuevoCurso;      
    } catch (error) {
      console.error ("Error al crear el curso en el back", error);
      throw new Error("Error al crear al curso");
    }
    
    // //ENTRADA LOG
    // console.log('Data received to create course:', data);
    // const nuevoCurso = await this.prisma.cursos.create({ data });
    // //RESULTADO LOG
    // console.log('Course created successfully:', nuevoCurso);
    // return nuevoCurso;
  }

  //MÉTODO OBTENER UN CURSO
  async getCourses() {
    return this.prisma.cursos.findMany();
  }

  // OBTENER CURSO POR ID
  async getCourseId(id:  number){
    return await this.prisma.cursos.findUnique({
      where: {id},
    });
  }

  

  //MÉTODO ACTUALIZAR UN CURSO POR ID
  async UpdateCourse (id: number, data: Prisma.CursosUpdateInput){
    console.log ('id received:', id);
    console.log('data received:', data);

    try {
      const updateCourse = await this.prisma.cursos.update({
        where: {id},
        data,
      });
      console.log ('update course:', updateCourse);
      return updateCourse;
    }
    catch (error){
      console.error ('error when updating course:', error);
      throw new error('the course was not updated');
    }
   
  }
  

  //MÉTODO PARA ELIMINAR UN CURSO POR ID
  async deleteCourse(id: number) {
    return this.prisma.cursos.delete({ where: { id } });
  }


}

