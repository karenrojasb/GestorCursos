"use client";
import { TrashIcon, XMarkIcon, MagnifyingGlassIcon, PencilSquareIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  Lugar: string;
  NombreProfesor?: string;
  Descripcion: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [editandoCurso, setEditandoCurso] = useState<Curso | null>(null);
  const [mensajeExito, setMensajeExito] = useState("");
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // Obtener cursos del backend
  const fetchCursos = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("http://localhost:8090/api/cursos");
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      const data = await response.json();
      setCursos(data);
      setCursosFiltrados(data);
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
    }
    setIsLoading(false);
  };

  useEffect(() => {
    fetchCursos();
  }, []);

  // Buscar cursos
  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter(curso => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  // Expandir detalles del curso
  const handleVerMas = (id: number) => {
    setExpandedCursoId(expandedCursoId === id ? null : id);
  };

  // Eliminar curso
  const handleDeleteCourse = async (id: number) => {
    if (!confirm("¿Estás seguro de que deseas eliminar este curso?")) return;

    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${id}`, { method: "DELETE" });
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

      setMensajeExito("Curso eliminado correctamente");
      setTimeout(() => setMensajeExito(""), 3000);
      setCursos(prev => prev.filter(curso => curso.id !== id));
      setCursosFiltrados(prev => prev.filter(curso => curso.id !== id));
    } catch (error) {
      console.error("Error al eliminar el curso:", error);
      alert("No se pudo eliminar el curso");
    }
    setIsLoading(false);
  };

  // Iniciar edición
  const handleEditar = (curso: Curso) => setEditandoCurso({ ...curso });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!editandoCurso) return;
    const { name, value } = e.target;
    setEditandoCurso(prev => (prev ? { ...prev, [name]: value } : null));
  };

  // Guardar cambios
  const handleGuardarEdicion = async () => {
    if (!editandoCurso) return;

    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${editandoCurso.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editandoCurso),
      });

      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

      setMensajeExito("¡Curso actualizado con éxito!");
      await fetchCursos();
      setTimeout(() => {
        setMensajeExito("");
        setEditandoCurso(null);
      }, 3000);
    } catch (error) {
      console.error("Error al guardar la edición:", error);
    }
    setIsLoading(false);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto">
        
        {/* Botón cerrar */}
        <button className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]" onClick={onClose}>
          <XMarkIcon className="w-6 h-6" />
        </button>

        {/* Barra de búsqueda con animación */}
        <div className="flex items-center space-x-2 mb-4">
          <button onClick={() => setIsSearchActive(!isSearchActive)} className="p-2 rounded-full bg-gray-200 transition-transform duration-300 transform hover:scale-110">
            {isSearchActive ? <XMarkIcon className="h-6 w-6 text-[#990000]" /> : <MagnifyingGlassIcon className="h-6 w-6 text-[#990000]" />}
          </button>
          {isSearchActive && (
            <input type="text" placeholder="Buscar curso" value={busqueda} onChange={handleBuscar} className="px-4 py-2 border rounded-full w-96 focus:outline-none transition-all duration-300 ease-in-out" />
          )}
        </div>

        {/* Spinner de carga */}
        {isLoading && (
          <div className="flex justify-center my-4">
            <div className="w-10 h-10 border-4 border-[#990000] border-solid border-t-transparent rounded-full animate-spin"></div>
          </div>
        )}

        {/* Lista de cursos */}
        {!isLoading && cursosFiltrados.length > 0 ? (
          cursosFiltrados.map(curso => (
            <div key={curso.id} className="border-b py-2">
              <div className="grid grid-cols-3 items-center">
                <span>{curso.NombreCurso}</span>
                <span className="text-center">{curso.Inicio || "dd/mm/aaaa"}</span>
                <div className="flex space-x-2">
                  <button onClick={() => handleVerMas(curso.id)} className="bg-[#990000] text-white px-4 py-2 rounded">
                    {expandedCursoId === curso.id ? "Ver menos" : "Ver más"}
                  </button>
                  <button onClick={() => handleEditar(curso)} className="bg-[#990000] text-white p-2 rounded">
                    <PencilSquareIcon className="h-5 w-5" />
                  </button>
                  <button onClick={() => handleDeleteCourse(curso.id)} className="bg-[#990000] text-white p-2 rounded">
                    <TrashIcon className="h-5 w-5"/>
                  </button>
                </div>
              </div>

              {/* Detalles del curso */}
              {expandedCursoId === curso.id && (
                <div className="p-4 border border-gray-300 bg-gray-50 rounded-lg shadow-md mt-2">
                  <h3 className="text-lg font-bold text-[#990000] mb-2">{curso.NombreCurso}</h3>
                  <p><strong>Descripción:</strong> {curso.Descripcion}</p>
                </div>
              )}
            </div>
          ))
        ) : !isLoading && (
          <p className="text-center py-4 text-gray-600">No hay cursos disponibles.</p>
        )}
      </div>
    </div>
  );
}