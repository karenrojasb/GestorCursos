"use client";

import { XMarkIcon, MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Profesor: number;
  Descripcion: string;
}

export default function CatalogoModal({ onClose, idUsuario }: { onClose: () => void; idUsuario: number }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [inscripciones, setInscripciones] = useState<{ [key: number]: boolean }>({});

  useEffect(() => {
    const fetchCursos = async () => {
      try {
        const response = await fetch("http://localhost:8090/api/cursos");
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const data = await response.json();
        const hoy = new Date();

        // Filtrar solo cursos activos
        const cursosActivos = data.filter((curso: Curso) => {
          if (!curso.Fin) return true;
          return new Date(curso.Fin) >= hoy;
        });

        setCursos(cursosActivos);
        setCursosFiltrados(cursosActivos);
      } catch (error) {
        console.error("Error al obtener los cursos:", error);
      }
    };

    const fetchInscripciones = async () => {
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${idUsuario}`);
        if (!response.ok) throw new Error("Error al obtener inscripciones.");

        const data = await response.json();
        const inscripcionesMap = data.reduce((acc: { [key: number]: boolean }, inscripcion: any) => {
          acc[inscripcion.id_curso] = true;
          return acc;
        }, {});

        setInscripciones(inscripcionesMap);
      } catch (error) {
        console.error("Error al obtener inscripciones:", error);
      }
    };

    fetchCursos();
    fetchInscripciones();
  }, [idUsuario]);

  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter((curso) => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  const handleVerMas = (id: number) => {
    setExpandedCursoId(expandedCursoId === id ? null : id);
  };

  const handleInscribirse = async (idCurso: number) => {
    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id_usuario: idUsuario, id_curso: idCurso }),
      });

      if (!response.ok) throw new Error("Error al inscribirse en el curso.");

      setInscripciones((prev) => ({ ...prev, [idCurso]: true }));
    } catch (error) {
      console.error("Error al inscribirse:", error);
    }
  };

  const handleDesinscribirse = async (idCurso: number) => {
    try {
      const response = await fetch(`http://localhost:8090/api/inscripciones/${idUsuario}/${idCurso}`, {
        method: "DELETE",
      });

      if (!response.ok) throw new Error("Error al desinscribirse del curso.");

      setInscripciones((prev) => {
        const updated = { ...prev };
        delete updated[idCurso];
        return updated;
      });
    } catch (error) {
      console.error("Error al desinscribirse:", error);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full h-[700px] max-w-3xl flex flex-col">
        {/* BARRA DE BUSQUEDA */}
        <div className="flex justify-between items-center mb-4">
          <div className="relative flex items-center" onMouseEnter={() => setIsSearchActive(true)} onMouseLeave={() => !busqueda && setIsSearchActive(false)}>
            <button onClick={() => setIsSearchActive(!isSearchActive)} className="p-2 rounded-full bg-gray-200">
              {isSearchActive ? <XMarkIcon className="h-6 w-6 text-[#990000]" /> : <MagnifyingGlassIcon className="h-6 w-6 text-[#990000]" />}
            </button>
            <input
              type="text"
              placeholder="Buscar curso"
              value={busqueda}
              onChange={handleBuscar}
              className={`px-4 py-2 border rounded-full transition-all duration-500 ease-in-out ${
                isSearchActive ? "w-96 opacity-100 bg-white shadow-md" : "w-0 opacity-0"
              } focus:outline-none`}
            />
          </div>
          <button className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]" onClick={onClose}>
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        {/* LISTA DE CURSOS */}
        <div className="flex-1 overflow-y-auto mt-2 space-y-2">
          {cursosFiltrados.length > 0 ? (
            cursosFiltrados.map((curso) => (
              <div key={curso.id} className="border-b py-2">
                <div className="grid grid-cols-3 items-center">
                  <span>{curso.NombreCurso}</span>
                  <span className="text-center">{curso.Inicio || "dd/mm/aaaa"}</span>

                  <button onClick={() => handleVerMas(curso.id)} className="ml-4 bg-[#990000] hover:bg-red-700 text-white px-4 py-1 rounded w-24">
                    {expandedCursoId === curso.id ? "Ver menos" : "Ver más"}
                  </button>
                </div>

                {/* DETALLES DEL CURSO */}
                {expandedCursoId === curso.id && (
                  <div className="p-4 border border-gray-300 bg-gray-50 rounded-lg shadow-md mt-2">
                    <h3 className="text-lg font-bold text-[#990000] mb-2">{curso.NombreCurso}</h3>
                    <p><strong>Descripción:</strong> {curso.Descripcion}</p>
                    <p><strong>Profesor:</strong> {curso.Profesor}</p>
                    <p><strong>Lugar:</strong> {curso.Lugar}</p>
                    <p><strong>Horas:</strong> {curso.Horas}</p>

                    {inscripciones[curso.id] ? (
                      <button onClick={() => handleDesinscribirse(curso.id)} className="ml-72 bg-gray-500 hover:bg-gray-700 text-white px-4 py-1 rounded w-24">
                        Cancelar
                      </button>
                    ) : (
                      <button onClick={() => handleInscribirse(curso.id)} className="ml-72 bg-[#990000] hover:bg-red-700 text-white px-4 py-1 rounded w-24">
                        Inscribirse
                      </button>
                    )}
                  </div>
                )}
              </div>
            ))
          ) : (
            <p className="text-center py-4">No hay cursos disponibles.</p>
          )}
        </div>
      </div>
    </div>
  );
}