import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma.service';
import { CreateInscripcionDto } from './dto/create-inscripcion.dto';
import { UpdateInscripcionDto } from './dto/update-inscripcion.dto';

@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  async crearInscripcion(data: CreateInscripcionDto) {
    return this.prisma.inscripciones.create({ data });
  }

  async obtenerTodas() {
    return this.prisma.inscripciones.findMany();
  }

  async obtenerPorId(id: number) {
    const inscripcion = await this.prisma.inscripciones.findUnique({ where: { id } });
    if (!inscripcion) throw new NotFoundException('Inscripci√≥n no encontrada');
    return inscripcion;
  }

  async actualizarEstado(id: number, data: UpdateInscripcionDto) {
    return this.prisma.inscripciones.update({ where: { id }, data });
  }

  async eliminarInscripcion(id: number) {
    return this.prisma.inscripciones.delete({ where: { id } });
  }
}



import { Controller, Get, Post, Body, Param, Patch, Delete } from '@nestjs/common';
import { InscripcionesService } from './inscripciones.service';
import { CreateInscripcionDto } from './dto/create-inscripcion.dto';
import { UpdateInscripcionDto } from './dto/update-inscripcion.dto';

@Controller('inscripciones')
export class InscripcionesController {
  constructor(private readonly inscripcionesService: InscripcionesService) {}

  @Post()
  crear(@Body() createInscripcionDto: CreateInscripcionDto) {
    return this.inscripcionesService.crearInscripcion(createInscripcionDto);
  }

  @Get()
  obtenerTodas() {
    return this.inscripcionesService.obtenerTodas();
  }

  @Get(':id')
  obtenerPorId(@Param('id') id: string) {
    return this.inscripcionesService.obtenerPorId(Number(id));
  }

  @Patch(':id')
  actualizarEstado(@Param('id') id: string, @Body() updateInscripcionDto: UpdateInscripcionDto) {
    return this.inscripcionesService.actualizarEstado(Number(id), updateInscripcionDto);
  }

  @Delete(':id')
  eliminar(@Param('id') id: string) {
    return this.inscripcionesService.eliminarInscripcion(Number(id));
  }
}