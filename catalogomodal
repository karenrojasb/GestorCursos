"use client";

import { XMarkIcon, MagnifyingGlassIcon, CheckCircleIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Modalidad: number;
  Unidad: number;
  Profesor: number;
  SegundoPro: string;
  Proexterno: string;
  Descripcion: string;
  IdTipoCurso: number;
  NombreProfesor?: string;
}

interface Inscripcion {
  id: number;
  idCur: number;
  docInscr: number;
  est: boolean;
  fecreg: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [busqueda, setBusqueda] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [idEmp, setIdEmp] = useState<number | null>(null);
  const [inscripciones, setInscripciones] = useState<Inscripcion[]>([]);
  const [loadingInscripcion, setLoadingInscripcion] = useState<number | null>(null);
  const [mensaje, setMensaje] = useState<{ text: string; type: "success" | "error" } | null>(null);

  useEffect(() => {
    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      setIdEmp(Number(storedIdEmp));
      fetchCursos(Number(storedIdEmp));
    }
  }, []);

  const fetchCursos = async (idEmp: number) => {
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/usuario/${idEmp}`);
      if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
      const data = await response.json();

      const hoy = new Date();
      const cursosActivos = data.cursos.filter((curso: Curso) => !curso.Fin || new Date(curso.Fin) >= hoy);

      setTimeout(() => {
        setCursos(cursosActivos);
        setCursosFiltrados(cursosActivos);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error("Error al obtener los cursos:", error);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    const fetchInscripciones = async () => {
      if (!idEmp) return;
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones?docInscr=${idEmp}`);
        if (!response.ok) throw new Error("Error al obtener inscripciones");
        const data = await response.json();
        setInscripciones(data.filter((ins: Inscripcion) => ins.est === true));
      } catch (error) {
        console.error("Error al obtener inscripciones:", error);
      }
    };

    if (idEmp) fetchInscripciones();
  }, [idEmp]);

  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter((curso) => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  const handleInscripcion = async (idCur: number, estaInscrito: boolean, inscripcionId?: number) => {
    setLoadingInscripcion(idCur);

    if (!idEmp) {
      setMensaje({ text: "Error: No se encuentra el documento de usuario.", type: "error" });
      setLoadingInscripcion(null);
      return;
    }

    try {
      if (estaInscrito && inscripcionId) {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${inscripcionId}`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ est: false }),
        });

        if (!response.ok) throw new Error("Error al cancelar inscripción");
      } else {
        const fecreg = new Date().toISOString().split("T")[0];

        const response = await fetch("http://localhost:8090/api/inscripciones", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ idCur, docInscr: idEmp, est: true, fecreg }),
        });

        if (!response.ok) throw new Error("Error al inscribirse");
      }

      const updatedResponse = await fetch(`http://localhost:8090/api/inscripciones?docInscr=${idEmp}`);
      const updatedData = await updatedResponse.json();
      setInscripciones(updatedData.filter((ins: Inscripcion) => ins.est === true));

      setMensaje({
        text: estaInscrito ? "Inscripción cancelada correctamente" : "Inscripción realizada con éxito",
        type: "success",
      });
    } catch (error) {
      setMensaje({ text: "No se pudo completar la acción.", type: "error" });
    }

    setLoadingInscripcion(null);

    setTimeout(() => {
      setMensaje(null);
    }, 3000);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full h-[700px] max-w-3xl flex flex-col">
        
        {/* BOTÓN CERRAR */}
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-500 hover:text-[#990000] transition-transform duration-300 transform hover:rotate-90 hover:scale-110"
        >
          <XMarkIcon className="h-6 w-6" />
        </button>

        {/* MENSAJE DE CONFIRMACIÓN */}
        {mensaje && (
          <div className={`fixed top-5 left-1/2 transform -translate-x-1/2 px-4 py-2 rounded shadow-md text-white ${mensaje.type === "success" ? "bg-green-600" : "bg-red-600"}`}>
            {mensaje.text}
          </div>
        )}

        {/* LISTA DE CURSOS */}
        <div className="flex-1 overflow-y-auto mt-2 space-y-2">
          {isLoading ? (
            <div className="flex justify-center py-4">
              <div className="w-8 h-8 border-4 border-gray-300 border-t-[#990000] rounded-full animate-spin"></div>
            </div>
          ) : cursosFiltrados.length > 0 ? (
            cursosFiltrados.map((curso) => {
              const inscripcion = inscripciones.find(ins => ins.idCur === curso.id && ins.est);

              return (
                <div key={curso.id} className="border-b py-2 flex justify-between items-center">
                  <span>{curso.NombreCurso}</span>
                  <button
                    onClick={() => handleInscripcion(curso.id, !!inscripcion, inscripcion?.id)}
                    className="ml-4 bg-[#990000] hover:bg-red-700 text-white px-4 py-1 rounded transition-all duration-300 transform hover:scale-110"
                    disabled={loadingInscripcion === curso.id}
                  >
                    {loadingInscripcion === curso.id ? "Procesando..." : inscripcion ? "Cancelar" : "Inscribirse"}
                  </button>
                </div>
              );
            })
          ) : (
            <p className="text-center py-4">No hay cursos disponibles.</p>
          )}
        </div>
      </div>
    </div>
  );
}