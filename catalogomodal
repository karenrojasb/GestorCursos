"use client";

import { XMarkIcon, MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Inicio: string;
  Fin: string;
  Valor: number;
  Periodo: string;
  Horas: number;
  Lugar: string;
  Descripcion: string;
  NombreProfesor?: string;
}

interface Inscripcion {
  id: number;
  idCur: number;
  docInscr: string;
  est: number; // 1 = inscrito, 0 = cancelado
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [inscribiendo, setInscribiendo] = useState(false);
  const [errorInscripcion, setErrorInscripcion] = useState<string | null>(null);
  const [idEmp, setIdEmp] = useState<string | null>(null);
  const [inscripciones, setInscripciones] = useState<Inscripcion[]>([]);

  useEffect(() => {
    const fetchCursos = async () => {
      try {
        const response = await fetch("http://localhost:8090/api/cursos");
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const data = await response.json();
        setCursos(data);
        setCursosFiltrados(data);
        setIsLoading(false);
      } catch (error) {
        console.error("Error al obtener los cursos:", error);
        setIsLoading(false);
      }
    };

    const fetchInscripciones = async (empId: string) => {
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones`);
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const data = await response.json();
        const inscripcionesUsuario = data.filter(
          (insc: Inscripcion) => insc.docInscr === empId
        );
        setInscripciones(inscripcionesUsuario);
      } catch (error) {
        console.error("Error al obtener inscripciones:", error);
      }
    };

    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      setIdEmp(storedIdEmp);
      fetchInscripciones(storedIdEmp);
    }

    fetchCursos();
  }, []);

  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(
      cursos.filter((curso) =>
        curso.NombreCurso.toLowerCase().includes(texto)
      )
    );
  };

  const handleVerMas = (id: number) => {
    setExpandedCursoId(expandedCursoId === id ? null : id);
  };

  const handleInscribir = async (idCur: number) => {
    if (!idEmp) {
      setErrorInscripcion("Error: No se encuentra el documento de usuario.");
      return;
    }

    setInscribiendo(true);
    setErrorInscripcion(null);
    const fecreg = new Date().toISOString().split("T")[0];

    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          idCur,
          docInscr: idEmp,
          est: 1,
          fecreg,
        }),
      });

      if (!response.ok) throw new Error("Error al inscribirse en el curso");

      alert("Inscripción exitosa");
      setInscripciones([...inscripciones, { id: Date.now(), idCur, docInscr: idEmp, est: 1 }]);
    } catch (error) {
      setErrorInscripcion("No se pudo completar la inscripción, intentelo nuevamente.");
    } finally {
      setInscribiendo(false);
    }
  };

  const handleCancelarInscripcion = async (idCur: number) => {
    const inscripcion = inscripciones.find((insc) => insc.idCur === idCur);
    if (!inscripcion) return;

    setInscribiendo(true);
    setErrorInscripcion(null);

    try {
      const response = await fetch(`http://localhost:8090/api/inscripciones/${inscripcion.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ est: 0 }),
      });

      if (!response.ok) throw new Error("Error al cancelar la inscripción");

      alert("Inscripción cancelada");
      setInscripciones(
        inscripciones.map((insc) =>
          insc.idCur === idCur ? { ...insc, est: 0 } : insc
        )
      );
    } catch (error) {
      setErrorInscripcion("No se pudo cancelar la inscripción, inténtelo nuevamente.");
    } finally {
      setInscribiendo(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full h-[700px] max-w-3xl flex flex-col">
        <div className="flex justify-between items-center mb-4">
          <div className="relative flex items-center">
            <button onClick={() => setIsSearchActive(!isSearchActive)}>
              <MagnifyingGlassIcon className="h-6 w-6 text-[#990000]" />
            </button>
            <input
              type="text"
              placeholder="Busque el nombre del curso"
              value={busqueda}
              onChange={handleBuscar}
              className={`px-4 py-2 border rounded-full transition-all duration-500 ease-in-out 
                ${isSearchActive ? "w-96 opacity-100" : "w-0 opacity-0"} focus:outline-none`}
            />
          </div>
          <button onClick={onClose}>
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        <div className="flex-1 overflow-y-auto">
          {cursosFiltrados.map((curso) => {
            const inscripcion = inscripciones.find(
              (insc) => insc.idCur === curso.id
            );
            const inscrito = inscripcion && inscripcion.est === 1;

            return (
              <div key={curso.id} className="border-b py-2">
                <div className="grid grid-cols-3 items-center">
                  <span>{curso.NombreCurso}</span>
                  <span className="text-center">{curso.Inicio}</span>

                  <button
                    onClick={() =>
                      inscrito ? handleCancelarInscripcion(curso.id) : handleInscribir(curso.id)
                    }
                    className={`ml-4 px-4 py-1 rounded w-24 h-11 transition-all duration-300 ${
                      inscrito
                        ? "bg-gray-500 hover:bg-gray-700"
                        : "bg-[#990000] hover:bg-red-700"
                    } text-white`}
                  >
                    {inscrito ? "Cancelar" : "Inscribirse"}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}