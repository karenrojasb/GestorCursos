import React, { useState, useEffect } from "react";
import { XMarkIcon } from "@heroicons/react/24/solid";

interface CursoModalProps {
  idCur: number; 
  onClose: () => void;
  onSave: (data: { idCur: number; docInscr: number }) => void;
  onInscripcionExitosa: () => void;
}

export default function CursoModal({ idCur, onClose, onSave, onInscripcionExitosa }: CursoModalProps) {
  const [docInscr, setDocInscr] = useState<number | null>(null);
  const [cargando, setCargando] = useState(false);
  const [mensaje, setMensaje] = useState("");
  const [inscrito, setInscrito] = useState(false); 

  // OBTENER ID DEL USUARIO DESDE LOCALSTORAGE
  useEffect(() => {
    const usuarioLogueado = localStorage.getItem("usuario");
    if (usuarioLogueado) {
      const usuario = JSON.parse(usuarioLogueado);
      setDocInscr(Number(usuario.id)); // Convertir el id a número
    }
  }, []);

  // VERIFICA SI EL USUARIO YA ESTÁ INSCRITO EN EL CURSO
  useEffect(() => {
    const verificarInscripcion = async () => {
      if (!docInscr) return; // No ejecutar si no hay un usuario logueado

      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`);
        if (response.ok) {
          setInscrito(true);
        }
      } catch (error) {
        console.error("Error al verificar inscripción:", error);
      }
    };

    verificarInscripcion();
  }, [idCur, docInscr]);

  // INSCRIBIRSE AL CURSO
  const handleInscribir = async (e: React.FormEvent) => {
    e.preventDefault();
    setCargando(true);
    setMensaje("");

    if (!docInscr) {
      setMensaje("Error: No se pudo obtener el ID del usuario.");
      setCargando(false);
      return;
    }

    try {
      const response = await fetch("http://localhost:8090/api/inscripciones", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ idCur, docInscr }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Error al inscribir usuario.");
      }

      setMensaje("Inscripción realizada con éxito.");
      setInscrito(true);
      onInscripcionExitosa();
      onSave({ idCur, docInscr });
    } catch (error) {
      console.error("Error en la inscripción:", error);
      setMensaje("Hubo un problema al inscribir.");
    } finally {
      setCargando(false);
    }
  };

  // CANCELAR INSCRIPCIÓN
  const handleCancelarInscripcion = async () => {
    setCargando(true);
    setMensaje("");

    try {
      const response = await fetch(`http://localhost:8090/api/inscripciones/${idCur}/${docInscr}`, {
        method: "DELETE",
      });

      if (!response.ok) throw new Error("Error al cancelar la inscripción.");

      setMensaje("Inscripción cancelada.");
      setInscrito(false);
      onInscripcionExitosa();
    } catch (error) {
      console.error("Error al cancelar inscripción:", error);
      setMensaje("Hubo un problema al cancelar la inscripción.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full max-w-md flex flex-col">
        
        {/* BOTÓN CERRAR */}
        <button
          className="absolute top-4 right-4 text-gray-500 hover:text-[#990000] transition-transform duration-300 hover:rotate-90"
          onClick={onClose}
        >
          <XMarkIcon className="w-6 h-6" />
        </button>

        <h2 className="text-xl font-bold mb-4 text-center text-[#990000]">
          {inscrito ? "Cancelar Inscripción" : "Inscribir Usuario"}
        </h2>

        {/* MENSAJE DE ERROR O ÉXITO */}
        {mensaje && (
          <p className={`text-center text-sm font-semibold ${mensaje.includes("éxito") ? "text-green-600" : "text-red-600"}`}>
            {mensaje}
          </p>
        )}

        {/* BOTÓN DE INSCRIPCIÓN Y CANCELACIÓN */}
        {inscrito ? (
          <button
            type="button"
            onClick={handleCancelarInscripcion}
            className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
            disabled={cargando}
          >
            {cargando ? "Cancelando..." : "Cancelar Inscripción"}
          </button>
        ) : (
          <button
            onClick={handleInscribir}
            className="mt-3 w-full bg-[#990000] text-white py-2 rounded-lg hover:scale-105 transition"
            disabled={cargando}
          >
            {cargando ? "Inscribiendo..." : "Inscribir"}
          </button>
        )}

        <button
          type="button"
          onClick={onClose}
          className="mt-3 w-full bg-gray-500 text-white py-2 rounded-lg hover:scale-105 transition"
        >
          Cerrar
        </button>
      </div>
    </div>
  );
}