"use client";

import { XMarkIcon, MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  NombreProfesor?: string;
  Descripcion: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [expandedCursoId, setExpandedCursoId] = useState<number | null>(null);
  const [busqueda, setBusqueda] = useState("");
  const [isSearchActive, setIsSearchActive] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [inscribiendo, setInscribiendo] = useState(false);
  const [errorInscripcion, setErrorInscripcion] = useState<string | null>(null);
  const [idEmp, setIdEmp] = useState<string | null>(null); // Estado para almacenar el id_emp

  useEffect(() => {
    // Obtener el id_emp de localStorage cuando se abre el modal
    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      setIdEmp(storedIdEmp);
    }

    const fetchCursos = async () => {
      try {
        const response = await fetch("http://localhost:8090/api/cursos");
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const data = await response.json();
        const hoy = new Date();
        const cursosActivos = data.filter((curso: Curso) => !curso.Fin || new Date(curso.Fin) >= hoy);

        setTimeout(() => {
          setCursos(cursosActivos);
          setCursosFiltrados(cursosActivos);
          setIsLoading(false);
        }, 3000);
      } catch (error) {
        console.error("Error al obtener los cursos:", error);
        setIsLoading(false);
      }
    };

    fetchCursos();
  }, []);

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full h-[700px] max-w-3xl flex flex-col">
        
        {/* Mostrar el id_emp en la esquina superior derecha */}
        {idEmp && (
          <div className="absolute top-2 right-4 text-gray-500 text-sm font-semibold">
            ID: {idEmp}
          </div>
        )}

        {/* BARRA DE BÚSQUEDA */}
        <div className="flex justify-between items-center mb-4">
          <div className="relative flex items-center">
            <button
              onClick={() => setIsSearchActive(!isSearchActive)}
              className="p-2 rounded-full bg-gray-200"
            >
              {isSearchActive ? (
                <XMarkIcon className="h-6 w-6 text-[#990000] rotate-180" />
              ) : (
                <MagnifyingGlassIcon className="h-6 w-6 text-[#990000]" />
              )}
            </button>

            <input
              type="text"
              placeholder="Busque el nombre del curso"
              value={busqueda}
              onChange={(e) => setBusqueda(e.target.value.toLowerCase())}
              className={`px-4 py-2 border rounded-full transition-all duration-500 
                ${isSearchActive ? "w-96 opacity-100 bg-white shadow-md" : "w-0 opacity-0"} focus:outline-none`}
            />
          </div>

          {/* BOTÓN CERRAR */}
          <button className="absolute top-4 right-4 text-gray-500 hover:text-[#990000]" onClick={onClose}>
            <XMarkIcon className="w-6 h-6" />
          </button>
        </div>

        {/* CONTENIDO DEL MODAL */}
        <div className="flex-1 overflow-y-auto mt-2 space-y-2">
          {isLoading ? (
            <div className="flex justify-center py-4">
              <div className="w-8 h-8 border-4 border-gray-300 border-t-[#990000] rounded-full animate-spin"></div>
            </div>
          ) : cursosFiltrados.length > 0 ? (
            cursosFiltrados.map((curso) => (
              <div key={curso.id} className="border-b py-2">
                <div className="grid grid-cols-3 items-center">
                  <span>{curso.NombreCurso}</span>
                  <span className="text-center">{curso.Inicio || "dd/mm/aaaa"}</span>
                  <button
                    className="ml-4 bg-[#990000] hover:bg-red-700 text-white px-4 py-1 rounded w-24 transition-all hover:scale-110 active:scale-95"
                  >
                    Ver más
                  </button>
                </div>
              </div>
            ))
          ) : (
            <p className="text-center py-4">No hay cursos disponibles.</p>
          )}
        </div>
      </div>
    </div>
  );
}