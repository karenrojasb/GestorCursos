
import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones';
import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';


@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  async crearInscripcion(data: CreateInscripcionDto) {
    return this.prisma.inscripciones.create({ data});
  }

  async getInscripciones() {
    return this.prisma.inscripciones.findMany({
        include: {
            Cursos: {select: {id: true, NombreCurso: true}},
        },
    });
}

  async obtenerPorId(id: number) {
    const inscripcion = await this.prisma.inscripciones.findUnique({ where: { id } });
    if (!inscripcion) throw new NotFoundException('Inscripción no encontrada');
    return inscripcion;
  }

  async actualizarEstado(id: number, data: UpdateInscripcionDto) {
    return this.prisma.inscripciones.update({ where: { id }, data });
  }

  async eliminarInscripcion(id: number) {
    return this.prisma.inscripciones.delete({ where: { id } });
  }
}




import { CreateInscripcionDto } from './dto/create-inscripciones.dto';
import { UpdateInscripcionDto } from './dto/update-inscripciones';
import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';


@Injectable()
export class InscripcionesService {
  constructor(private readonly prisma: PrismaService) {}

  async crearInscripcion(data: CreateInscripcionDto) {
    return this.prisma.inscripciones.create({ data});
  }

  async getInscripciones() {
    return this.prisma.inscripciones.findMany({
        include: {
            Cursos: {select: {id: true, NombreCurso: true}},
        },
    });
}

  async obtenerPorId(id: number) {
    const inscripcion = await this.prisma.inscripciones.findUnique({ where: { id } });
    if (!inscripcion) throw new NotFoundException('Inscripción no encontrada');
    return inscripcion;
  }

  async actualizarEstado(id: number, data: UpdateInscripcionDto) {
    return this.prisma.inscripciones.update({ where: { id }, data });
  }

  async eliminarInscripcion(id: number) {
    return this.prisma.inscripciones.delete({ where: { id } });
  }
}



