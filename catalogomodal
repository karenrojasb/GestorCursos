"use client";

import { XMarkIcon, MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { useEffect, useState } from "react";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
}

interface Inscripcion {
  id: number;
  idCur: number;
  docInscr: number;
  est: boolean;
  fecreg: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [busqueda, setBusqueda] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [idEmp, setIdEmp] = useState<number | null>(null);
  const [inscripciones, setInscripciones] = useState<Inscripcion[]>([]);

  // 1️⃣ Obtener idEmp de localStorage de manera segura
  useEffect(() => {
    const storedIdEmp = localStorage.getItem("id_emp");
    if (storedIdEmp) {
      setIdEmp(Number(storedIdEmp));
    }
  }, []);

  // 2️⃣ Cargar los cursos disponibles
  useEffect(() => {
    const fetchCursos = async () => {
      try {
        const response = await fetch("http://localhost:8090/api/cursos");
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
        const data = await response.json();

        const hoy = new Date();
        const cursosActivos = data.filter((curso: Curso) => !curso.Fin || new Date(curso.Fin) >= hoy);

        setTimeout(() => {
          setCursos(cursosActivos);
          setCursosFiltrados(cursosActivos);
          setIsLoading(false);
        }, 1000);
      } catch (error) {
        console.error("Error al obtener los cursos:", error);
        setIsLoading(false);
      }
    };

    fetchCursos();
  }, []);

  // 3️⃣ Cargar inscripciones solo cuando idEmp esté definido
  useEffect(() => {
    if (!idEmp) return; // Evita que se ejecute con idEmp = null

    const fetchInscripciones = async () => {
      try {
        const response = await fetch(`http://localhost:8090/api/inscripciones?docInscr=${idEmp}`);
        if (!response.ok) throw new Error("Error al obtener inscripciones");
        const data = await response.json();
        setInscripciones(data.filter((ins: Inscripcion) => ins.est === true));
      } catch (error) {
        console.error("Error al obtener inscripciones:", error);
      }
    };

    fetchInscripciones();
  }, [idEmp]); // Ahora solo se ejecuta cuando `idEmp` tiene un valor válido

  // 4️⃣ Filtrar cursos al escribir en la barra de búsqueda
  const handleBuscar = (e: React.ChangeEvent<HTMLInputElement>) => {
    const texto = e.target.value.toLowerCase();
    setBusqueda(texto);
    setCursosFiltrados(cursos.filter((curso) => curso.NombreCurso.toLowerCase().includes(texto)));
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="relative bg-white p-6 rounded-lg shadow-lg w-full h-[700px] max-w-3xl flex flex-col">
        
        {/* BARRA DE BUSQUEDA */}
        <div className="flex justify-between items-center mb-4">
          <div className="relative flex items-center">
            <MagnifyingGlassIcon className="h-6 w-6 text-[#990000] mr-2" />
            <input
              type="text"
              placeholder="Buscar curso"
              value={busqueda}
              onChange={handleBuscar}
              className="px-4 py-2 border rounded-full w-full focus:outline-none"
            />
          </div>
          <button onClick={onClose} className="text-gray-500 hover:text-[#990000]">
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        {/* LISTA DE CURSOS */}
        <div className="flex-1 overflow-y-auto mt-2 space-y-2">
          {isLoading ? (
            <div className="flex justify-center py-4">
              <div className="w-8 h-8 border-4 border-gray-300 border-t-[#990000] rounded-full animate-spin"></div>
            </div>
          ) : cursosFiltrados.length > 0 ? (
            cursosFiltrados.map((curso) => (
              <div key={curso.id} className="border-b py-2 flex justify-between items-center">
                <span>{curso.NombreCurso}</span>
                <button className="bg-[#990000] text-white px-4 py-1 rounded">Ver más</button>
              </div>
            ))
          ) : (
            <p className="text-center py-4">No hay cursos disponibles.</p>
          )}
        </div>
      </div>
    </div>
  );
}