"use client";
import { useEffect, useState } from "react";
import { TrashIcon, XMarkIcon, MagnifyingGlassIcon, PencilSquareIcon } from "@heroicons/react/24/solid";

interface Curso {
  id: number;
  NombreCurso: string;
  Valor: number;
  Publico: number;
  Periodo: string;
  Inicio: string;
  Fin: string;
  Horas: number;
  CupoMax: number;
  Lugar: string;
  Descripcion: string;
  NombreProfesor?: string;
}

export default function CatalogoModal({ onClose }: { onClose: () => void }) {
  const [cursos, setCursos] = useState<Curso[]>([]);
  const [cursosFiltrados, setCursosFiltrados] = useState<Curso[]>([]);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false); // Estado del spinner

  useEffect(() => {
    fetchCursos();
  }, []);

  const fetchCursos = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8090/api/cursos");
      if (!response.ok) throw new Error("Error al obtener los cursos");
      const data: Curso[] = await response.json();
      setCursos(data);
      setCursosFiltrados(data);
    } catch (error) {
      console.error("Error:", error);
    }
    setLoading(false);
  };

  const eliminarCurso = async (id: number) => {
    if (!confirm("¿Estás seguro de que deseas eliminar este curso?")) return;

    setLoading(true);
    try {
      const response = await fetch(`http://localhost:8090/api/cursos/${id}`, { method: "DELETE" });
      if (!response.ok) throw new Error("Error al eliminar el curso");

      setCursos((prevCursos) => prevCursos.filter((curso) => curso.id !== id));
      setCursosFiltrados((prevCursos) => prevCursos.filter((curso) => curso.id !== id));
    } catch (error) {
      console.error("Error:", error);
    }
    setLoading(false);
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    const filtered = cursos.filter((curso) =>
      curso.NombreCurso.toLowerCase().includes(e.target.value.toLowerCase())
    );
    setCursosFiltrados(filtered);
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-4xl">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Catálogo de Cursos</h2>
          <button onClick={onClose}>
            <XMarkIcon className="w-6 h-6 text-gray-600 hover:text-gray-800" />
          </button>
        </div>

        {/* Barra de búsqueda */}
        <div className="relative mb-4">
          <input
            type="text"
            value={searchTerm}
            onChange={handleSearch}
            className="w-full px-4 py-2 border rounded-lg pl-10"
            placeholder="Buscar curso..."
          />
          <MagnifyingGlassIcon className="w-5 h-5 text-gray-500 absolute left-3 top-2.5" />
        </div>

        {/* Indicador de carga */}
        {loading && (
          <div className="flex justify-center items-center my-4">
            <div className="w-10 h-10 border-4 border-blue-500 border-solid border-t-transparent rounded-full animate-spin"></div>
          </div>
        )}

        {/* Tabla de cursos */}
        {!loading && (
          <div className="overflow-y-auto max-h-96">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-200 text-gray-700 text-left">
                  <th className="p-2">Curso</th>
                  <th className="p-2">Periodo</th>
                  <th className="p-2">Inicio</th>
                  <th className="p-2">Fin</th>
                  <th className="p-2">Acciones</th>
                </tr>
              </thead>
              <tbody>
                {cursosFiltrados.length > 0 ? (
                  cursosFiltrados.map((curso) => (
                    <tr key={curso.id} className="border-b">
                      <td className="p-2">{curso.NombreCurso}</td>
                      <td className="p-2">{curso.Periodo}</td>
                      <td className="p-2">{curso.Inicio}</td>
                      <td className="p-2">{curso.Fin}</td>
                      <td className="p-2 flex gap-2">
                        <button className="text-blue-600 hover:text-blue-800">
                          <PencilSquareIcon className="w-5 h-5" />
                        </button>
                        <button
                          onClick={() => eliminarCurso(curso.id)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <TrashIcon className="w-5 h-5" />
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={5} className="text-center p-4 text-gray-500">
                      No hay cursos disponibles.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}