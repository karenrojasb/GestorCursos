import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class InscripcionService {
  constructor(private prisma: PrismaService) {}

  // Obtener todas las inscripciones con el nombre del curso
  async getInscripciones() {
    return this.prisma.inscripcion.findMany({
      include: {
        curso: { select: { id: true, NombreCurso: true } },
      },
    });
  }

  // Inscribir usuario a un curso
  async inscribirUsuario(docInscr: string, idCur: number) {
    const nuevaInscripcion = await this.prisma.inscripcion.create({
      data: {
        docInscr,
        idCur,
        est: 1, // Estado inicial (ajústalo según necesidad)
      },
      include: { curso: true },
    });

    return nuevaInscripcion;
  }

  // Eliminar inscripción
  async eliminarInscripcion(id: number) {
    return this.prisma.inscripcion.delete({ where: { id } });
  }
}





import { Controller, Get, Post, Delete, Body, Param } from '@nestjs/common';
import { InscripcionService } from './inscripcion.service';

@Controller('inscripcion')
export class InscripcionController {
  constructor(private readonly inscripcionService: InscripcionService) {}

  // Obtener inscripciones con los nombres de los cursos
  @Get()
  async obtenerInscripciones() {
    return this.inscripcionService.getInscripciones();
  }

  // Inscribir un usuario
  @Post()
  async inscribir(@Body() body: { docInscr: string; idCur: number }) {
    return this.inscripcionService.inscribirUsuario(body.docInscr, body.idCur);
  }

  // Eliminar inscripción por ID
  @Delete(':id')
  async eliminar(@Param('id') id: string) {
    return this.inscripcionService.eliminarInscripcion(Number(id));
  }
}