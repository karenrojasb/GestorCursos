const handleInscribir = async (idCur: number) => {
  setInscribiendo(true);
  setErrorInscripcion(null);

  // Obtener el usuario autenticado desde localStorage
  const docInscr = localStorage.getItem("docInscr");

  if (!docInscr || docInscr === "undefined" || docInscr === "null") {
    alert("Error: No se encontró el usuario autenticado. Inicie sesión nuevamente.");
    console.error("docInscr en localStorage:", docInscr);
    setInscribiendo(false);
    return;
  }

  const fecreg = new Date().toISOString().split("T")[0];

  try {
    const response = await fetch("http://localhost:8090/api/inscripciones", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ idCur, docInscr, est: true, fecreg }),
    });

    if (!response.ok) throw new Error("Error al inscribirse en el curso");

    alert("Inscripción realizada con éxito.");
  } catch (error) {
    setErrorInscripcion("No se pudo completar la inscripción, inténtelo nuevamente.");
  } finally {
    setInscribiendo(false);
  }
};





async iniciarSesion(e_mail: string) {
  const usuario = await this.prisma.$queryRaw<any[]>`
    SELECT id_emp, nombre, publico, e_mail 
    FROM gescur.emp_nomina 
    WHERE TRIM(e_mail) = TRIM(${e_mail})`;

  if (usuario.length === 0) {
    throw new NotFoundException('Usuario no encontrado');
  }

  const usuarioEncontrado = usuario[0];

  // Verificar si el usuario es administrador
  const esAdmin = await this.prisma.rol_usuario.count({
    where: { usuario: usuarioEncontrado.e_mail },
  });

  return {
    id_emp: usuarioEncontrado.id_emp, // Asegurar que se devuelve el ID del usuario
    nombre: usuarioEncontrado.nombre,
    publico: usuarioEncontrado.publico,
    e_mail: usuarioEncontrado.e_mail,
    esAdmin: esAdmin > 0,
  };
}



